{"version":3,"file":"static/js/471.87043b9b.chunk.js","mappings":"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","sources":["pages/Profile.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { UserProfile } from '../types';\nimport '../styles/Profile.css';\n\nconst Profile: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Edit profile form state\n  const [isEditing, setIsEditing] = useState<boolean>(false);\n  const [fullName, setFullName] = useState<string>('');\n  const [username, setUsername] = useState<string>('');\n  \n  // Avatar upload state\n  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);\n  const [avatarFile, setAvatarFile] = useState<File | null>(null);\n  const [uploadProgress, setUploadProgress] = useState<number>(0);\n  const [uploading, setUploading] = useState<boolean>(false);\n  \n  // Admin request state\n  const [showAdminRequest, setShowAdminRequest] = useState<boolean>(false);\n  const [adminRequestReason, setAdminRequestReason] = useState<string>('');\n\n  useEffect(() => {\n    fetchProfile();\n  }, []);\n\n  // Fetch user profile\n  const fetchProfile = async () => {\n    try {\n      setLoading(true);\n      \n      // Get current user\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      // Fetch profile data\n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n        \n      if (error) throw error;\n      \n      if (data) {\n        setUserProfile(data);\n        setFullName(data.full_name || '');\n        setUsername(data.username || '');\n        setAvatarUrl(data.avatar_url || null);\n      }\n    } catch (err: any) {\n      console.error('Error fetching profile:', err);\n      setError('Failed to load profile. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update profile\n  const handleUpdateProfile = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!userProfile) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Validate username\n      if (!username.trim()) {\n        setError('Username cannot be empty');\n        setLoading(false);\n        return;\n      }\n      \n      // Check if username already exists (excluding current user)\n      const { data: usernameCheck, error: usernameError } = await supabase\n        .from('profiles')\n        .select('id')\n        .eq('username', username)\n        .neq('id', userProfile.id);\n        \n      if (usernameError) throw usernameError;\n      \n      if (usernameCheck && usernameCheck.length > 0) {\n        setError('This username is already taken');\n        setLoading(false);\n        return;\n      }\n      \n      // Update profile\n      const updates = {\n        username,\n        full_name: fullName,\n        updated_at: new Date().toISOString()\n      };\n      \n      const { error } = await supabase\n        .from('profiles')\n        .update(updates)\n        .eq('id', userProfile.id);\n        \n      if (error) throw error;\n      \n      // Upload avatar if changed\n      if (avatarFile) {\n        await uploadAvatar();\n      }\n      \n      setSuccess('Profile updated successfully');\n      \n      // Refresh profile data\n      await fetchProfile();\n      setIsEditing(false);\n    } catch (err: any) {\n      console.error('Error updating profile:', err);\n      setError(err.message || 'Failed to update profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle avatar selection\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files || e.target.files.length === 0) {\n      return;\n    }\n    \n    const file = e.target.files[0];\n    if (file.size > 2 * 1024 * 1024) { // 2MB max\n      setError('Image is too large. Please select an image under 2MB.');\n      return;\n    }\n    \n    // Preview image\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      if (e.target?.result) {\n        setAvatarUrl(e.target.result as string);\n      }\n    };\n    reader.readAsDataURL(file);\n    \n    setAvatarFile(file);\n  };\n\n  // Upload avatar to storage\n  const uploadAvatar = async () => {\n    if (!avatarFile || !userProfile) return;\n    \n    try {\n      setUploading(true);\n      \n      // Generate a unique file name\n      const fileExt = avatarFile.name.split('.').pop();\n      const fileName = `${userProfile.id}-${Math.random().toString(36).substring(2)}.${fileExt}`;\n      const filePath = `avatars/${fileName}`;\n      \n      // Upload file\n      const { error: uploadError } = await supabase.storage\n        .from('user-avatars')\n        .upload(filePath, avatarFile, {\n          cacheControl: '3600',\n          upsert: true\n        });\n        \n      if (uploadError) throw uploadError;\n      \n      // Get public URL\n      const { data } = supabase.storage\n        .from('user-avatars')\n        .getPublicUrl(filePath);\n        \n      // Update profile with new avatar URL\n      const { error: updateError } = await supabase\n        .from('profiles')\n        .update({\n          avatar_url: data.publicUrl\n        })\n        .eq('id', userProfile.id);\n        \n      if (updateError) throw updateError;\n      \n      setAvatarUrl(data.publicUrl);\n    } catch (err: any) {\n      console.error('Error uploading avatar:', err);\n      setError('Failed to upload avatar. Please try again.');\n    } finally {\n      setUploading(false);\n      setAvatarFile(null);\n    }\n  };\n\n  // Send request for admin role\n  const handleAdminRequest = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!userProfile) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!adminRequestReason.trim()) {\n        setError('Please provide a reason for your request');\n        return;\n      }\n      \n      // In a real app, this would send an email or create a support ticket\n      // Here we'll simulate it with a console log and a success message\n      console.log('Admin request submitted:', {\n        userId: userProfile.id,\n        username: userProfile.username,\n        email: userProfile.email,\n        reason: adminRequestReason\n      });\n      \n      setSuccess('Admin role request submitted successfully. You will be contacted soon.');\n      setShowAdminRequest(false);\n      setAdminRequestReason('');\n    } catch (err: any) {\n      console.error('Error submitting admin request:', err);\n      setError(err.message || 'Failed to submit admin request');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format date for display\n  const formatDate = (dateString: string | undefined) => {\n    if (!dateString) return 'Unknown';\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading && !userProfile) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading profile...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"profile-container\">\n      <div className=\"profile-header\">\n        <h1>My Profile</h1>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-alert\">\n          <i className=\"icon-check-circle\"></i>\n          <p>{success}</p>\n          <button \n            className=\"success-close\" \n            onClick={() => setSuccess(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      <div className=\"profile-content\">\n        <div className=\"profile-card\">\n          <div className=\"profile-sidebar\">\n            <div className=\"avatar-container\">\n              {avatarUrl ? (\n                <img \n                  src={avatarUrl} \n                  alt={userProfile?.username || 'User'}\n                  className=\"avatar-image\" \n                />\n              ) : (\n                <div className=\"avatar-placeholder\">\n                  {userProfile?.username?.[0]?.toUpperCase() || 'U'}\n                </div>\n              )}\n              \n              {isEditing && (\n                <div className=\"avatar-upload\">\n                  <label htmlFor=\"avatar-input\" className=\"upload-label\">\n                    <i className=\"icon-camera\"></i>\n                    <span>Change</span>\n                  </label>\n                  <input \n                    id=\"avatar-input\" \n                    type=\"file\"\n                    accept=\"image/*\"\n                    onChange={handleAvatarChange}\n                    className=\"upload-input\" \n                  />\n                </div>\n              )}\n            </div>\n            \n            {!isEditing && (\n              <>\n                <h2 className=\"profile-name\">\n                  {userProfile?.full_name || userProfile?.username || 'User'}\n                </h2>\n                \n                <div className=\"profile-meta\">\n                  <div className=\"meta-item\">\n                    <i className=\"icon-calendar\"></i>\n                    Joined {formatDate(userProfile?.created_at)}\n                  </div>\n                  \n                  <div className=\"meta-item\">\n                    <i className=\"icon-user\"></i>\n                    @{userProfile?.username}\n                  </div>\n                </div>\n                \n                <button \n                  className=\"btn btn-primary btn-edit-profile\"\n                  onClick={() => setIsEditing(true)}\n                >\n                  Edit Profile\n                </button>\n              </>\n            )}\n          </div>\n          \n          <div className=\"profile-details\">\n            {isEditing ? (\n              <form className=\"edit-profile-form\" onSubmit={handleUpdateProfile}>\n                <h2>Edit Profile</h2>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"username\">Username</label>\n                  <input\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    maxLength={20}\n                    required\n                  />\n                  <small className=\"form-hint\">This will be your public @username</small>\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"full-name\">Full Name (Optional)</label>\n                  <input\n                    id=\"full-name\"\n                    type=\"text\"\n                    value={fullName}\n                    onChange={(e) => setFullName(e.target.value)}\n                    maxLength={50}\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <input\n                    id=\"email\"\n                    type=\"email\"\n                    value={userProfile?.email || ''}\n                    disabled\n                    className=\"readonly-input\"\n                  />\n                  <small className=\"form-hint\">Email cannot be changed</small>\n                </div>\n                \n                <div className=\"form-actions\">\n                  <button \n                    type=\"button\"\n                    className=\"btn btn-outline\" \n                    onClick={() => {\n                      setIsEditing(false);\n                      setFullName(userProfile?.full_name || '');\n                      setUsername(userProfile?.username || '');\n                      setAvatarUrl(userProfile?.avatar_url || null);\n                      setAvatarFile(null);\n                      setError(null);\n                    }}\n                    disabled={loading}\n                  >\n                    Cancel\n                  </button>\n                  <button \n                    type=\"submit\"\n                    className=\"btn btn-primary\" \n                    disabled={loading}\n                  >\n                    {loading ? 'Saving...' : 'Save Changes'}\n                  </button>\n                </div>\n              </form>\n            ) : (\n              <>\n                <h2>Account Information</h2>\n                \n                <div className=\"info-group\">\n                  <div className=\"info-label\">Email</div>\n                  <div className=\"info-value\">{userProfile?.email}</div>\n                </div>\n                \n                <div className=\"info-group\">\n                  <div className=\"info-label\">Username</div>\n                  <div className=\"info-value\">@{userProfile?.username}</div>\n                </div>\n                \n                {userProfile?.full_name && (\n                  <div className=\"info-group\">\n                    <div className=\"info-label\">Full Name</div>\n                    <div className=\"info-value\">{userProfile.full_name}</div>\n                  </div>\n                )}\n                \n                <div className=\"info-group\">\n                  <div className=\"info-label\">Account Type</div>\n                  <div className=\"info-value account-type\">\n                    <span className={`role-badge ${userProfile?.role}`}>\n                      {userProfile?.role === 'admin' ? 'Administrator' : 'Standard User'}\n                    </span>\n                    \n                    {userProfile?.role !== 'admin' && (\n                      <button \n                        className=\"btn btn-text\"\n                        onClick={() => setShowAdminRequest(true)}\n                      >\n                        Request Admin Access\n                      </button>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"info-group\">\n                  <div className=\"info-label\">Joined</div>\n                  <div className=\"info-value\">{formatDate(userProfile?.created_at)}</div>\n                </div>\n                \n                <h3>Account Security</h3>\n                <div className=\"security-links\">\n                  <a href=\"/settings\" className=\"security-link\">\n                    <i className=\"icon-lock\"></i>\n                    <div className=\"link-content\">\n                      <span className=\"link-title\">Security Settings</span>\n                      <span className=\"link-description\">Change password, enable 2FA, manage sessions</span>\n                    </div>\n                    <i className=\"icon-arrow-right\"></i>\n                  </a>\n                  \n                  <a href=\"/settings#notifications\" className=\"security-link\">\n                    <i className=\"icon-bell\"></i>\n                    <div className=\"link-content\">\n                      <span className=\"link-title\">Notification Preferences</span>\n                      <span className=\"link-description\">Manage your notification settings</span>\n                    </div>\n                    <i className=\"icon-arrow-right\"></i>\n                  </a>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      \n      {/* Admin Request Modal */}\n      {showAdminRequest && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Request Admin Access</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setShowAdminRequest(false)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <form onSubmit={handleAdminRequest}>\n              <div className=\"modal-body\">\n                <p className=\"admin-request-info\">\n                  Admin access provides additional privileges to manage users, \n                  system settings, and access to advanced features. Please explain \n                  why you need admin access:\n                </p>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"admin-reason\">Reason for Request</label>\n                  <textarea\n                    id=\"admin-reason\"\n                    value={adminRequestReason}\n                    onChange={(e) => setAdminRequestReason(e.target.value)}\n                    rows={5}\n                    placeholder=\"Please explain why you need admin access...\"\n                    required\n                  ></textarea>\n                </div>\n              </div>\n              \n              <div className=\"modal-footer\">\n                <button \n                  type=\"button\" \n                  className=\"btn btn-outline\" \n                  onClick={() => setShowAdminRequest(false)}\n                >\n                  Cancel\n                </button>\n                <button \n                  type=\"submit\" \n                  className=\"btn btn-primary\"\n                  disabled={loading}\n                >\n                  Submit Request\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Profile;\n"],"names":["Profile","_userProfile$username","_userProfile$username2","loading","setLoading","useState","userProfile","setUserProfile","error","setError","success","setSuccess","isEditing","setIsEditing","fullName","setFullName","username","setUsername","avatarUrl","setAvatarUrl","avatarFile","setAvatarFile","uploadProgress","setUploadProgress","uploading","setUploading","showAdminRequest","setShowAdminRequest","adminRequestReason","setAdminRequestReason","useEffect","fetchProfile","async","data","user","supabase","auth","getUser","Error","from","select","eq","id","single","full_name","avatar_url","err","console","uploadAvatar","fileExt","name","split","pop","filePath","Math","random","toString","substring","uploadError","storage","upload","cacheControl","upsert","getPublicUrl","updateError","update","publicUrl","formatDate","dateString","Date","toLocaleDateString","_jsxs","className","children","_jsx","onClick","src","alt","toUpperCase","htmlFor","type","accept","onChange","e","target","files","length","file","size","reader","FileReader","onload","_e$target","result","readAsDataURL","_Fragment","created_at","onSubmit","preventDefault","trim","usernameCheck","usernameError","neq","updates","updated_at","toISOString","message","value","maxLength","required","email","disabled","role","href","log","userId","reason","rows","placeholder"],"sourceRoot":""}
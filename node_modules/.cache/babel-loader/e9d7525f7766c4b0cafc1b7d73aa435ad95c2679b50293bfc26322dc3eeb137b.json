{"ast":null,"code":"import React,{useEffect,useState}from'react';import{Navigate}from'react-router-dom';import{supabase}from'../supabaseClient.ts';import{jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const AdminRoute=_ref=>{let{children,session}=_ref;const[isAdmin,setIsAdmin]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{const checkAdminStatus=async()=>{if(!session){setIsAdmin(false);setLoading(false);return;}try{// Check if the user is admin - this depends on your admin identification logic\nconst{data,error}=await supabase.from('profiles').select('role').eq('id',session.user.id).single();if(error){console.error('Error checking admin status:',error);setIsAdmin(false);}else{// Check if this is the admin email or username\nconst isAdminUser=session.user.email==='petfeeder@redwancodes.com'||(data===null||data===void 0?void 0:data.role)==='admin';setIsAdmin(isAdminUser);}}catch(error){console.error('Error:',error);setIsAdmin(false);}finally{setLoading(false);}};checkAdminStatus();},[session]);if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"Loading...\"});}if(!isAdmin){return/*#__PURE__*/_jsx(Navigate,{to:\"/dashboard\"});}return/*#__PURE__*/_jsx(_Fragment,{children:children});};export default AdminRoute;","map":{"version":3,"names":["React","useEffect","useState","Navigate","supabase","jsx","_jsx","Fragment","_Fragment","AdminRoute","_ref","children","session","isAdmin","setIsAdmin","loading","setLoading","checkAdminStatus","data","error","from","select","eq","user","id","single","console","isAdminUser","email","role","className","to"],"sources":["/workspaces/Smart_Pet_Feeder/src/components/AdminRoute.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Session } from '@supabase/supabase-js';\nimport { supabase } from '../supabaseClient.ts';\n\ninterface AdminRouteProps {\n  children: React.ReactNode;\n  session: Session | null;\n}\n\nconst AdminRoute: React.FC<AdminRouteProps> = ({ children, session }) => {\n  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      if (!session) {\n        setIsAdmin(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Check if the user is admin - this depends on your admin identification logic\n        const { data, error } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', session.user.id)\n          .single();\n\n        if (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        } else {\n          // Check if this is the admin email or username\n          const isAdminUser = \n            session.user.email === 'petfeeder@redwancodes.com' || \n            data?.role === 'admin';\n          \n          setIsAdmin(isAdminUser);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setIsAdmin(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAdminStatus();\n  }, [session]);\n\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  if (!isAdmin) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n  \n  return <>{children}</>;\n};\n\nexport default AdminRoute;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,QAAQ,KAAQ,kBAAkB,CAE3C,OAASC,QAAQ,KAAQ,sBAAsB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,QAAA,IAAAC,SAAA,yBAOhD,KAAM,CAAAC,UAAqC,CAAGC,IAAA,EAA2B,IAA1B,CAAEC,QAAQ,CAAEC,OAAQ,CAAC,CAAAF,IAAA,CAClE,KAAM,CAACG,OAAO,CAAEC,UAAU,CAAC,CAAGZ,QAAQ,CAAiB,IAAI,CAAC,CAC5D,KAAM,CAACa,OAAO,CAAEC,UAAU,CAAC,CAAGd,QAAQ,CAAC,IAAI,CAAC,CAE5CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,gBAAgB,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CAACL,OAAO,CAAE,CACZE,UAAU,CAAC,KAAK,CAAC,CACjBE,UAAU,CAAC,KAAK,CAAC,CACjB,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAEE,IAAI,CAAEC,KAAM,CAAC,CAAG,KAAM,CAAAf,QAAQ,CACnCgB,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,MAAM,CAAC,CACdC,EAAE,CAAC,IAAI,CAAEV,OAAO,CAACW,IAAI,CAACC,EAAE,CAAC,CACzBC,MAAM,CAAC,CAAC,CAEX,GAAIN,KAAK,CAAE,CACTO,OAAO,CAACP,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,IAAM,CACL;AACA,KAAM,CAAAa,WAAW,CACff,OAAO,CAACW,IAAI,CAACK,KAAK,GAAK,2BAA2B,EAClD,CAAAV,IAAI,SAAJA,IAAI,iBAAJA,IAAI,CAAEW,IAAI,IAAK,OAAO,CAExBf,UAAU,CAACa,WAAW,CAAC,CACzB,CACF,CAAE,MAAOR,KAAK,CAAE,CACdO,OAAO,CAACP,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAC9BL,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,OAAS,CACRE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAEDC,gBAAgB,CAAC,CAAC,CACpB,CAAC,CAAE,CAACL,OAAO,CAAC,CAAC,CAEb,GAAIG,OAAO,CAAE,CACX,mBAAOT,IAAA,QAAKwB,SAAS,CAAC,SAAS,CAAAnB,QAAA,CAAC,YAAU,CAAK,CAAC,CAClD,CAEA,GAAI,CAACE,OAAO,CAAE,CACZ,mBAAOP,IAAA,CAACH,QAAQ,EAAC4B,EAAE,CAAC,YAAY,CAAE,CAAC,CACrC,CAEA,mBAAOzB,IAAA,CAAAE,SAAA,EAAAG,QAAA,CAAGA,QAAQ,CAAG,CAAC,CACxB,CAAC,CAED,cAAe,CAAAF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
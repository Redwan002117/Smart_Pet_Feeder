{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';const supabaseUrl='https://enxtmrpvfkkwikgiybsx.supabase.co';const supabaseAnonKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';// Create the Supabase client with custom options for handling clock skew\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey,{auth:{autoRefreshToken:true,persistSession:true,detectSessionInUrl:true,// Add tolerance for time skew between client and server (3600 seconds = 1 hour)\nflowType:'implicit',clockSkewTolerance:3600}});// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event,session)=>{if(event==='TOKEN_REFRESHED'){console.log('Token was refreshed successfully');}else if(event==='SIGNED_IN'&&session){// Log successful sign in but check for time issues\nconst now=Math.floor(Date.now()/1000);const expiresAt=session.expires_at;if(expiresAt&&now>expiresAt){console.warn('Session expiration time is in the past. Check system clock.');}if(expiresAt&&expiresAt-now>3600*24){console.warn('Session expiration time is far in the future. Potential clock skew.');}}});// Add a utility function to check system time against a reliable time server\nexport const checkSystemClock=async()=>{try{const response=await fetch('https://worldtimeapi.org/api/ip');const data=await response.json();if(data&&data.unixtime){const serverTime=data.unixtime;const localTime=Math.floor(Date.now()/1000);const skew=Math.abs(serverTime-localTime);if(skew>60){// More than 1 minute difference\nconsole.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);return{hasSkew:true,skewSeconds:skew,serverTime,localTime};}}return{hasSkew:false};}catch(error){console.error('Failed to check system clock:',error);return{hasSkew:false,error:error};}};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","flowType","clockSkewTolerance","onAuthStateChange","event","session","console","log","now","Math","floor","Date","expiresAt","expires_at","warn","checkSystemClock","response","fetch","data","json","unixtime","serverTime","localTime","skew","abs","hasSkew","skewSeconds","error"],"sources":["/workspaces/Smart_Pet_Feeder/src/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n\ninterface ClockCheckResult {\n  hasSkew: boolean;\n  skewSeconds?: number;\n  serverTime?: number;\n  localTime?: number;\n  error?: Error;\n}\n\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    \n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against a reliable time server\nexport const checkSystemClock = async (): Promise<ClockCheckResult> => {\n  try {\n    const response = await fetch('https://worldtimeapi.org/api/ip');\n    const data = await response.json();\n    \n    if (data && data.unixtime) {\n      const serverTime = data.unixtime;\n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      \n      if (skew > 60) { // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n    }\n    return { hasSkew: false };\n  } catch (error) {\n    console.error('Failed to check system clock:', error);\n    return { hasSkew: false, error: error as Error };\n  }\n};\n"],"mappings":"AAAA,OAASA,YAAY,KAAQ,uBAAuB,CAEpD,KAAM,CAAAC,WAAW,CAAG,0CAA0C,CAC9D,KAAM,CAAAC,eAAe,CAAG,kNAAkN,CAE1O;AACA,MAAO,MAAM,CAAAC,QAAQ,CAAGH,YAAY,CAACC,WAAW,CAAEC,eAAe,CAAE,CACjEE,IAAI,CAAE,CACJC,gBAAgB,CAAE,IAAI,CACtBC,cAAc,CAAE,IAAI,CACpBC,kBAAkB,CAAE,IAAI,CACxB;AACAC,QAAQ,CAAE,UAAU,CACpBC,kBAAkB,CAAE,IACtB,CACF,CAAC,CAAC,CAUF;AACAN,QAAQ,CAACC,IAAI,CAACM,iBAAiB,CAAC,CAACC,KAAK,CAAEC,OAAO,GAAK,CAClD,GAAID,KAAK,GAAK,iBAAiB,CAAE,CAC/BE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC,CACjD,CAAC,IAAM,IAAIH,KAAK,GAAK,WAAW,EAAIC,OAAO,CAAE,CAC3C;AACA,KAAM,CAAAG,GAAG,CAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CACzC,KAAM,CAAAI,SAAS,CAAGP,OAAO,CAACQ,UAAU,CAEpC,GAAID,SAAS,EAAIJ,GAAG,CAAGI,SAAS,CAAE,CAChCN,OAAO,CAACQ,IAAI,CAAC,6DAA6D,CAAC,CAC7E,CACA,GAAIF,SAAS,EAAIA,SAAS,CAAGJ,GAAG,CAAG,IAAI,CAAG,EAAE,CAAE,CAC5CF,OAAO,CAACQ,IAAI,CAAC,qEAAqE,CAAC,CACrF,CACF,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,gBAAgB,CAAG,KAAAA,CAAA,GAAuC,CACrE,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iCAAiC,CAAC,CAC/D,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,QAAQ,CAACG,IAAI,CAAC,CAAC,CAElC,GAAID,IAAI,EAAIA,IAAI,CAACE,QAAQ,CAAE,CACzB,KAAM,CAAAC,UAAU,CAAGH,IAAI,CAACE,QAAQ,CAChC,KAAM,CAAAE,SAAS,CAAGb,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,CAAG,IAAI,CAAC,CAC/C,KAAM,CAAAe,IAAI,CAAGd,IAAI,CAACe,GAAG,CAACH,UAAU,CAAGC,SAAS,CAAC,CAE7C,GAAIC,IAAI,CAAG,EAAE,CAAE,CAAE;AACfjB,OAAO,CAACQ,IAAI,CAAC,0BAA0BS,IAAI,iDAAiD,CAAC,CAC7F,MAAO,CACLE,OAAO,CAAE,IAAI,CACbC,WAAW,CAAEH,IAAI,CACjBF,UAAU,CACVC,SACF,CAAC,CACH,CACF,CACA,MAAO,CAAEG,OAAO,CAAE,KAAM,CAAC,CAC3B,CAAE,MAAOE,KAAK,CAAE,CACdrB,OAAO,CAACqB,KAAK,CAAC,+BAA+B,CAAEA,KAAK,CAAC,CACrD,MAAO,CAAEF,OAAO,CAAE,KAAK,CAAEE,KAAK,CAAEA,KAAe,CAAC,CAClD,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"version":3,"file":"static/js/718.a3ae0305.chunk.js","mappings":"8KAKA,MAoWA,EApWiCA,KAC/B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAkB,IACzCC,EAAOC,IAAYF,EAAAA,EAAAA,UAAwB,KAC3CG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,OAC3CK,EAASC,IAAcN,EAAAA,EAAAA,UAAwB,OAG/CO,EAAYC,IAAiBR,EAAAA,EAAAA,UAAiB,KAC9CS,EAAYC,IAAiBV,EAAAA,EAAAA,UAAiB,KAG9CW,EAAaC,IAAkBZ,EAAAA,EAAAA,UAAiB,IAChDa,EAAYC,IAAiBd,EAAAA,EAAAA,UAAiB,IAI9Ce,EAAeC,IAAoBhB,EAAAA,EAAAA,UAAwB,OAElEiB,EAAAA,EAAAA,YAAU,KACRC,GAAY,GACX,CAACP,EAAaF,EAAYF,IAE7B,MAAMW,EAAaC,UACjB,IACEpB,GAAW,GAGX,MAAQqB,MAAM,KAAEC,UAAiBC,EAAAA,EAASC,KAAKC,UAC/C,IAAKH,EAAM,MAAM,IAAII,MAAM,0BAE3B,MAAQL,KAAMM,SAAqBJ,EAAAA,EAChCK,KAAK,YACLC,OAAO,QACPC,GAAG,KAAMR,EAAKS,IACdC,SAEH,IAAKL,GAAkC,UAApBA,EAAWM,KAC5B,MAAM,IAAIP,MAAM,gCAIlB,IAAIQ,EAAQX,EAAAA,EAASK,KAAK,YAAYC,OAAO,IAAK,CAAEM,MAAO,UAGvDzB,IACFwB,EAAQA,EAAMJ,GAAG,OAAQpB,IAGvBF,IACF0B,EAAQA,EAAME,GAAG,mBAAmB5B,mBAA4BA,uBAAgCA,OAIlG,MAAM,MAAE2B,SAAgBD,EACxBnB,EAAcsB,KAAKC,MAAMH,GAAS,GAzCjB,KA4CjB,MAAMP,EA5CW,IA4CHhB,EAAc,GACtB2B,EAAKX,EA7CM,GA6CgB,GAE3B,KAAEP,EAAI,MAAEjB,SAAgB8B,EAC3BM,MAAMZ,EAAMW,GACZE,MAAM,aAAc,CAAEC,WAAW,IAEpC,GAAItC,EAAO,MAAMA,EAEjBD,EAASkB,GAAQ,GACnB,CAAE,MAAOsB,GACPC,QAAQxC,MAAM,wBAAyBuC,GACvCtC,EAASsC,EAAIE,SAAW,uBAC1B,CAAC,QACC7C,GAAW,EACb,GA6FF,OAAID,GAA4B,IAAjBG,EAAM4C,QAEjBC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBACfE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yBAMPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,yBAAwBC,UACrCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAGL7C,IACC2C,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kBACbE,EAAAA,EAAAA,KAAA,KAAAD,SAAI7C,KACJ8C,EAAAA,EAAAA,KAAA,UACEF,UAAU,cACVG,QAASA,IAAM9C,EAAS,MAAM4C,SAC/B,YAMJ3C,IACCyC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBACbE,EAAAA,EAAAA,KAAA,KAAAD,SAAI3C,KACJ4C,EAAAA,EAAAA,KAAA,UACEF,UAAU,gBACVG,QAASA,IAAM5C,EAAW,MAAM0C,SACjC,aAMLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,cAAcI,SAzDdC,IACpBA,EAAEC,iBACFzC,EAAe,GACfM,GAAY,EAsD6C8B,SAAA,EACnDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,iBACbE,EAAAA,EAAAA,KAAA,SACEK,KAAK,OACLC,YAAY,kBACZC,MAAOjD,EACPkD,SAAWL,GAAM5C,EAAc4C,EAAEM,OAAOF,aAG5CP,EAAAA,EAAAA,KAAA,UAAQK,KAAK,SAASP,UAAU,kBAAiBC,SAAC,eAGpDF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,SAAOU,QAAQ,cAAaX,SAAC,qBAC7BF,EAAAA,EAAAA,MAAA,UACEhB,GAAG,cACH0B,MAAO/C,EACPgD,SArEsBL,IAC9B1C,EAAc0C,EAAEM,OAAOF,OACvB5C,EAAe,EAAE,EAmEwBoC,SAAA,EAEjCC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,GAAER,SAAC,eACjBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,OAAMR,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,QAAOR,SAAC,oBAK5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAClCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,aAAYC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,WACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,cACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,YACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,UACJC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAGRC,EAAAA,EAAAA,KAAA,SAAAD,SACG/C,EAAM2D,KAAKvC,IAAI,IAAAwC,EAAAC,EAtFNC,EAsFM,OACdjB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,YAAWC,SAAA,CACvB3B,EAAK2C,YACJf,EAAAA,EAAAA,KAAA,OAAKgB,IAAK5C,EAAK2C,WAAYE,IAAK7C,EAAK8C,SAAUpB,UAAU,iBAEzDE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBAAoBC,UACnB,QAAba,EAAAxC,EAAK8C,gBAAQ,IAAAN,GAAK,QAALC,EAAbD,EAAgB,UAAE,IAAAC,OAAL,EAAbA,EAAoBM,gBAAiB,OAG1CnB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,SACvB3B,EAAKgD,WAAa,kBAIzBpB,EAAAA,EAAAA,KAAA,MAAAD,SAAK3B,EAAKiD,SACVxB,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CAAI,IAAE3B,EAAK8C,aACXlB,EAAAA,EAAAA,KAAA,MAAAD,UAxGMe,EAwGU1C,EAAKkD,WAvG1B,IAAIC,KAAKT,GAAYU,yBAwGhBxB,EAAAA,EAAAA,KAAA,MAAAD,UACEF,EAAAA,EAAAA,MAAA,UACEU,MAAOnC,EAAKW,KACZyB,SAAWL,GAlMJjC,OAAOuD,EAAgBC,KAC9C,IACE5E,GAAW,GACXK,EAAS,MAET,MAAM,MAAED,SAAgBmB,EAAAA,EACrBK,KAAK,YACLiD,OAAO,CAAE5C,KAAM2C,IACf9C,GAAG,KAAM6C,GAEZ,GAAIvE,EAAO,MAAMA,EAEjBD,EAASD,EAAM2D,KAAIvC,GACjBA,EAAKS,KAAO4C,EAAS,IAAKrD,EAAMW,KAAM2C,GAAYtD,KAGpDf,EAAW,wBAAwBqE,iBACrC,CAAE,MAAOjC,GACPC,QAAQxC,MAAM,4BAA6BuC,GAC3CtC,EAASsC,EAAIE,SAAW,6BAC1B,CAAC,QACC7C,GAAW,EACb,GA4KiC8E,CAAiBxD,EAAKS,GAAIsB,EAAEM,OAAOF,OACpDT,UAAW,eAAe1B,EAAKW,OAC/B8C,SAAUhF,EAAQkD,SAAA,EAElBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,OAAMR,SAAC,UACrBC,EAAAA,EAAAA,KAAA,UAAQO,MAAM,QAAOR,SAAC,gBAG1BC,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,0BACVG,QAASA,IAAMlC,EAAiBK,EAAKS,IACrCiD,MAAM,cACND,SAAUhF,EAAQkD,UAElBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBArCZ1B,EAAKS,GAyCT,YAMbgB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,UACEF,UAAU,aACV+B,SAA0B,IAAhBnE,EACVuC,QAASA,IAAMtC,GAAeoE,GAAQ5C,KAAK6C,IAAI,EAAGD,EAAO,KAAIhC,SAC9D,cAGDF,EAAAA,EAAAA,MAAA,QAAMC,UAAU,YAAWC,SAAA,CAAC,QAAMrC,EAAY,OAAKE,MACnDoC,EAAAA,EAAAA,KAAA,UACEF,UAAU,aACV+B,SAAUnE,IAAgBE,EAC1BqC,QAASA,IAAMtC,GAAeoE,GAAQ5C,KAAK8C,IAAIrE,EAAYmE,EAAO,KAAIhC,SACvE,YAMFjC,IACCkC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,iBACJC,EAAAA,EAAAA,KAAA,UACEF,UAAU,cACVG,QAASA,IAAMlC,EAAiB,MAAMgC,SACvC,aAKHC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,aAAYC,UACzBC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kBAAiBC,SAAC,wKAMjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACVG,QAASA,IAAMlC,EAAiB,MAAMgC,SACvC,YAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAU,iBACVG,QAASA,IAnPE/B,WACvB,IACEpB,GAAW,GACXK,EAAS,MAGT,MAAQD,MAAOgF,SAAuB7D,EAAAA,EACnCK,KAAK,WACLyD,SACAvD,GAAG,UAAW6C,GAEjB,GAAIS,EAAc,MAAMA,EAExB,MAAQhF,MAAOkF,SAAoB/D,EAAAA,EAChCK,KAAK,QACLyD,SACAvD,GAAG,UAAW6C,GAEjB,GAAIW,EAAW,MAAMA,EAErB,MAAQlF,MAAOmF,SAAyBhE,EAAAA,EACrCK,KAAK,aACLyD,SACAvD,GAAG,UAAW6C,GAEjB,GAAIY,EAAgB,MAAMA,EAE1B,MAAQnF,MAAOoF,SAAuBjE,EAAAA,EACnCK,KAAK,YACLyD,SACAvD,GAAG,KAAM6C,GAEZ,GAAIa,EAAc,MAAMA,EAIxB,MAAM,MAAEpF,SAAgBmB,EAAAA,EAASC,KAAKiE,MAAMC,WAAWf,GACvD,GAAIvE,EAAO,MAAMA,EAEjBD,EAASD,EAAMyF,QAAOrE,GAAQA,EAAKS,KAAO4C,KAC1C1D,EAAiB,MACjBV,EAAW,4BACb,CAAE,MAAOoC,GACPC,QAAQxC,MAAM,uBAAwBuC,GACtCtC,EAASsC,EAAIE,SAAW,wBAC1B,CAAC,QACC7C,GAAW,EACb,GAoM2B4F,CAAiB5E,GAChC+D,SAAUhF,EAAQkD,SACnB,0BAOL,C","sources":["pages/UserManagement.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { UserProfile } from '../types';\nimport '../styles/UserManagement.css';\n\nconst UserManagement: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [users, setUsers] = useState<UserProfile[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  \n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [roleFilter, setRoleFilter] = useState<string>('');\n  \n  // Pagination\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const usersPerPage = 10;\n  \n  // Delete confirmation\n  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchUsers();\n  }, [currentPage, roleFilter, searchTerm]);\n\n  const fetchUsers = async () => {\n    try {\n      setLoading(true);\n      \n      // Verify admin access\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { data: adminCheck } = await supabase\n        .from('profiles')\n        .select('role')\n        .eq('id', user.id)\n        .single();\n        \n      if (!adminCheck || adminCheck.role !== 'admin') {\n        throw new Error('You do not have admin access');\n      }\n      \n      // Build query\n      let query = supabase.from('profiles').select('*', { count: 'exact' });\n      \n      // Apply filters\n      if (roleFilter) {\n        query = query.eq('role', roleFilter);\n      }\n      \n      if (searchTerm) {\n        query = query.or(`username.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%,full_name.ilike.%${searchTerm}%`);\n      }\n      \n      // Get total count\n      const { count } = await query;\n      setTotalPages(Math.ceil((count || 0) / usersPerPage));\n      \n      // Apply pagination\n      const from = (currentPage - 1) * usersPerPage;\n      const to = from + usersPerPage - 1;\n      \n      const { data, error } = await query\n        .range(from, to)\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      \n      setUsers(data || []);\n    } catch (err: any) {\n      console.error('Error fetching users:', err);\n      setError(err.message || 'Failed to load users');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRoleChange = async (userId: string, newRole: 'user' | 'admin') => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { error } = await supabase\n        .from('profiles')\n        .update({ role: newRole })\n        .eq('id', userId);\n        \n      if (error) throw error;\n      \n      setUsers(users.map(user => \n        user.id === userId ? { ...user, role: newRole } : user\n      ));\n      \n      setSuccess(`User role updated to ${newRole} successfully`);\n    } catch (err: any) {\n      console.error('Error updating user role:', err);\n      setError(err.message || 'Failed to update user role');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDeleteUser = async (userId: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Delete user's data\n      const { error: devicesError } = await supabase\n        .from('devices')\n        .delete()\n        .eq('user_id', userId);\n        \n      if (devicesError) throw devicesError;\n      \n      const { error: petsError } = await supabase\n        .from('pets')\n        .delete()\n        .eq('user_id', userId);\n        \n      if (petsError) throw petsError;\n      \n      const { error: schedulesError } = await supabase\n        .from('schedules')\n        .delete()\n        .eq('user_id', userId);\n        \n      if (schedulesError) throw schedulesError;\n      \n      const { error: profileError } = await supabase\n        .from('profiles')\n        .delete()\n        .eq('id', userId);\n        \n      if (profileError) throw profileError;\n      \n      // Attempt to delete the user auth record\n      // Note: This may require additional Supabase admin privileges\n      const { error } = await supabase.auth.admin.deleteUser(userId);\n      if (error) throw error;\n      \n      setUsers(users.filter(user => user.id !== userId));\n      setDeleteConfirm(null);\n      setSuccess('User deleted successfully');\n    } catch (err: any) {\n      console.error('Error deleting user:', err);\n      setError(err.message || 'Failed to delete user');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    setCurrentPage(1);  // Reset to first page on new search\n    fetchUsers();\n  };\n\n  const handleRoleFilterChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    setRoleFilter(e.target.value);\n    setCurrentPage(1);  // Reset to first page on filter change\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  if (loading && users.length === 0) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading users...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"user-management-container\">\n      <div className=\"user-management-header\">\n        <h1>User Management</h1>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-alert\">\n          <i className=\"icon-check-circle\"></i>\n          <p>{success}</p>\n          <button \n            className=\"success-close\" \n            onClick={() => setSuccess(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      <div className=\"user-controls\">\n        <form className=\"search-form\" onSubmit={handleSearch}>\n          <div className=\"search-input\">\n            <i className=\"icon-search\"></i>\n            <input\n              type=\"text\"\n              placeholder=\"Search users...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n          </div>\n          <button type=\"submit\" className=\"btn btn-primary\">Search</button>\n        </form>\n        \n        <div className=\"filter-controls\">\n          <label htmlFor=\"role-filter\">Filter by Role:</label>\n          <select\n            id=\"role-filter\"\n            value={roleFilter}\n            onChange={handleRoleFilterChange}\n          >\n            <option value=\"\">All Roles</option>\n            <option value=\"user\">User</option>\n            <option value=\"admin\">Admin</option>\n          </select>\n        </div>\n      </div>\n      \n      <div className=\"user-list-container\">\n        <table className=\"user-table\">\n          <thead>\n            <tr>\n              <th>User</th>\n              <th>Email</th>\n              <th>Username</th>\n              <th>Joined</th>\n              <th>Role</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {users.map((user) => (\n              <tr key={user.id}>\n                <td>\n                  <div className=\"user-info\">\n                    {user.avatar_url ? (\n                      <img src={user.avatar_url} alt={user.username} className=\"user-avatar\" />\n                    ) : (\n                      <div className=\"avatar-placeholder\">\n                        {user.username?.[0]?.toUpperCase() || 'U'}\n                      </div>\n                    )}\n                    <div className=\"user-name\">\n                      {user.full_name || 'No Name'}\n                    </div>\n                  </div>\n                </td>\n                <td>{user.email}</td>\n                <td>@{user.username}</td>\n                <td>{formatDate(user.created_at)}</td>\n                <td>\n                  <select\n                    value={user.role}\n                    onChange={(e) => handleRoleChange(user.id, e.target.value as 'user' | 'admin')}\n                    className={`role-select ${user.role}`}\n                    disabled={loading}\n                  >\n                    <option value=\"user\">User</option>\n                    <option value=\"admin\">Admin</option>\n                  </select>\n                </td>\n                <td>\n                  <div className=\"user-actions\">\n                    <button \n                      className=\"btn btn-icon btn-danger\" \n                      onClick={() => setDeleteConfirm(user.id)}\n                      title=\"Delete User\"\n                      disabled={loading}\n                    >\n                      <i className=\"icon-trash\"></i>\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      \n      <div className=\"pagination\">\n        <button \n          className=\"btn btn-sm\" \n          disabled={currentPage === 1}\n          onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n        >\n          Previous\n        </button>\n        <span className=\"page-info\">Page {currentPage} of {totalPages}</span>\n        <button \n          className=\"btn btn-sm\" \n          disabled={currentPage === totalPages}\n          onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n        >\n          Next\n        </button>\n      </div>\n      \n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Delete User</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <div className=\"modal-body\">\n              <p className=\"confirm-message\">\n                Are you sure you want to delete this user? This will also delete all associated data\n                including devices, pets, and feeding history. This action cannot be undone.\n              </p>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button \n                className=\"btn btn-outline\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                Cancel\n              </button>\n              <button \n                className=\"btn btn-danger\" \n                onClick={() => handleDeleteUser(deleteConfirm)}\n                disabled={loading}\n              >\n                Delete User\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserManagement;\n"],"names":["UserManagement","loading","setLoading","useState","users","setUsers","error","setError","success","setSuccess","searchTerm","setSearchTerm","roleFilter","setRoleFilter","currentPage","setCurrentPage","totalPages","setTotalPages","deleteConfirm","setDeleteConfirm","useEffect","fetchUsers","async","data","user","supabase","auth","getUser","Error","adminCheck","from","select","eq","id","single","role","query","count","or","Math","ceil","to","range","order","ascending","err","console","message","length","_jsxs","className","children","_jsx","onClick","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","htmlFor","map","_user$username","_user$username$","dateString","avatar_url","src","alt","username","toUpperCase","full_name","email","created_at","Date","toLocaleDateString","userId","newRole","update","handleRoleChange","disabled","title","prev","max","min","devicesError","delete","petsError","schedulesError","profileError","admin","deleteUser","filter","handleDeleteUser"],"sourceRoot":""}
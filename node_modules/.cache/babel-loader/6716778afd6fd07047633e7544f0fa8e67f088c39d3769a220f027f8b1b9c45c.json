{"ast":null,"code":"var _jsxFileName = \"/workspaces/Smart_Pet_Feeder/src/pages/AuthCallback.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthCallback = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Handle the OAuth or magic link callback\n    const handleAuthCallback = async () => {\n      try {\n        // Get the auth code and session from URL\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const queryParams = new URLSearchParams(window.location.search);\n\n        // For OAuth flows, handle the session\n        if (hashParams.get('access_token')) {\n          var _data$session;\n          // Supabase will automatically handle this through getSession()\n          const {\n            data,\n            error\n          } = await supabase.auth.getSession();\n          if (error) throw error;\n          if (data !== null && data !== void 0 && (_data$session = data.session) !== null && _data$session !== void 0 && _data$session.user) {\n            // Check if profile exists, if not create one\n            const {\n              data: profile,\n              error: profileError\n            } = await supabase.from('profiles').select('*').eq('id', data.session.user.id).single();\n            if (profileError && profileError.message.includes('No rows found')) {\n              // Create a profile for the user\n              const {\n                error: insertError\n              } = await supabase.from('profiles').insert([{\n                id: data.session.user.id,\n                username: data.session.user.user_metadata.username || `user${Date.now().toString().slice(-6)}`,\n                email: data.session.user.email,\n                role: 'user'\n              }]);\n              if (insertError) console.error('Error creating profile:', insertError);\n            }\n\n            // Redirect to dashboard\n            navigate('/dashboard');\n          }\n        }\n        // For email link (OTP) flow\n        else if (queryParams.get('type') === 'recovery' || queryParams.get('type') === 'signup') {\n          // Get token from query params\n          const token = queryParams.get('token');\n          if (!token) throw new Error('No token found in URL');\n\n          // Handle password recovery flow\n          if (queryParams.get('type') === 'recovery') {\n            navigate('/reset-password', {\n              state: {\n                token\n              }\n            });\n          }\n          // Handle signup confirmation\n          else if (queryParams.get('type') === 'signup') {\n            // Confirm the signup if needed\n            const {\n              error\n            } = await supabase.auth.verifyOtp({\n              token_hash: token,\n              type: 'signup'\n            });\n            if (error) throw error;\n\n            // Redirect to login after successful confirmation\n            navigate('/login', {\n              state: {\n                message: 'Email confirmed! You can now log in.'\n              }\n            });\n          }\n        } else {\n          // Fallback - go to dashboard if logged in, otherwise to login\n          const {\n            data\n          } = await supabase.auth.getSession();\n          navigate(data.session ? '/dashboard' : '/login');\n        }\n      } catch (err) {\n        console.error('Auth callback error:', err);\n        setError(err.message || 'An error occurred during authentication');\n      }\n    };\n    handleAuthCallback();\n  }, [navigate]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-callback-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"auth-callback-error\",\n        children: [/*#__PURE__*/_jsxDEV(\"i\", {\n          className: \"icon-error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Authentication Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => navigate('/login'),\n          children: \"Back to Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-callback-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"auth-callback-loading\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Completing authentication...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthCallback, \"S97YeATJ+8xJ4yPil4tpqooM9lc=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthCallback;\nexport default AuthCallback;\nvar _c;\n$RefreshReg$(_c, \"AuthCallback\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","supabase","jsxDEV","_jsxDEV","AuthCallback","_s","error","setError","navigate","handleAuthCallback","hashParams","URLSearchParams","window","location","hash","substring","queryParams","search","get","_data$session","data","auth","getSession","session","user","profile","profileError","from","select","eq","id","single","message","includes","insertError","insert","username","user_metadata","Date","now","toString","slice","email","role","console","token","Error","state","verifyOtp","token_hash","type","err","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/workspaces/Smart_Pet_Feeder/src/pages/AuthCallback.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\n\nconst AuthCallback: React.FC = () => {\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Handle the OAuth or magic link callback\n    const handleAuthCallback = async () => {\n      try {\n        // Get the auth code and session from URL\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const queryParams = new URLSearchParams(window.location.search);\n\n        // For OAuth flows, handle the session\n        if (hashParams.get('access_token')) {\n          // Supabase will automatically handle this through getSession()\n          const { data, error } = await supabase.auth.getSession();\n          \n          if (error) throw error;\n          \n          if (data?.session?.user) {\n            // Check if profile exists, if not create one\n            const { data: profile, error: profileError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', data.session.user.id)\n              .single();\n            \n            if (profileError && profileError.message.includes('No rows found')) {\n              // Create a profile for the user\n              const { error: insertError } = await supabase\n                .from('profiles')\n                .insert([\n                  {\n                    id: data.session.user.id,\n                    username: data.session.user.user_metadata.username || `user${Date.now().toString().slice(-6)}`,\n                    email: data.session.user.email,\n                    role: 'user',\n                  }\n                ]);\n                \n              if (insertError) console.error('Error creating profile:', insertError);\n            }\n            \n            // Redirect to dashboard\n            navigate('/dashboard');\n          }\n        }\n        // For email link (OTP) flow\n        else if (queryParams.get('type') === 'recovery' || queryParams.get('type') === 'signup') {\n          // Get token from query params\n          const token = queryParams.get('token');\n          \n          if (!token) throw new Error('No token found in URL');\n          \n          // Handle password recovery flow\n          if (queryParams.get('type') === 'recovery') {\n            navigate('/reset-password', { state: { token } });\n          } \n          // Handle signup confirmation\n          else if (queryParams.get('type') === 'signup') {\n            // Confirm the signup if needed\n            const { error } = await supabase.auth.verifyOtp({\n              token_hash: token,\n              type: 'signup',\n            });\n            \n            if (error) throw error;\n            \n            // Redirect to login after successful confirmation\n            navigate('/login', { \n              state: { message: 'Email confirmed! You can now log in.' } \n            });\n          }\n        } else {\n          // Fallback - go to dashboard if logged in, otherwise to login\n          const { data } = await supabase.auth.getSession();\n          navigate(data.session ? '/dashboard' : '/login');\n        }\n      } catch (err: any) {\n        console.error('Auth callback error:', err);\n        setError(err.message || 'An error occurred during authentication');\n      }\n    };\n\n    handleAuthCallback();\n  }, [navigate]);\n\n  if (error) {\n    return (\n      <div className=\"auth-callback-container\">\n        <div className=\"auth-callback-error\">\n          <i className=\"icon-error\"></i>\n          <h2>Authentication Error</h2>\n          <p>{error}</p>\n          <button className=\"btn btn-primary\" onClick={() => navigate('/login')}>\n            Back to Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"auth-callback-container\">\n      <div className=\"auth-callback-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Completing authentication...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthCallback;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
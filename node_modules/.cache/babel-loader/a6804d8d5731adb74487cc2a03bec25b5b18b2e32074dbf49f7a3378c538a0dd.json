{"ast":null,"code":"// Email validation\nexport const isValidEmail=email=>{const emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;return emailRegex.test(email);};// Password validation (at least 8 characters, including number/special char)\nexport const isValidPassword=password=>{const passwordRegex=/^(?=.*[A-Za-z])(?=.*\\d|\\W).{8,}$/;return passwordRegex.test(password);};// Username validation (alphanumeric, underscore, hyphen, 3-20 chars)\nexport const isValidUsername=username=>{const usernameRegex=/^[a-zA-Z0-9_-]{3,20}$/;return usernameRegex.test(username);};// Device name validation (2-30 chars)\nexport const isValidDeviceName=name=>{return name.trim().length>=2&&name.trim().length<=30;};// Pet name validation (2-30 chars)\nexport const isValidPetName=name=>{return name.trim().length>=2&&name.trim().length<=30;};// Time validation (HH:MM format)\nexport const isValidTime=time=>{const timeRegex=/^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;return timeRegex.test(time);};// Date validation (YYYY-MM-DD format)\nexport const isValidDate=date=>{const dateRegex=/^\\d{4}-\\d{2}-\\d{2}$/;if(!dateRegex.test(date))return false;const d=new Date(date);return d instanceof Date&&!isNaN(d.getTime());};// Field required validation\nexport const isRequired=value=>{if(typeof value==='string'){return value.trim().length>0;}return value!==undefined&&value!==null;};// Numeric value validation\nexport const isNumeric=value=>{return!isNaN(Number(value));};// Range validation\nexport const isInRange=(value,min,max)=>{return value>=min&&value<=max;};// WiFi SSID validation\nexport const isValidSSID=ssid=>{return ssid.trim().length>=1&&ssid.trim().length<=32;};// WiFi password validation\nexport const isValidWiFiPassword=password=>{return password.length>=8;};// Validate form fields\nexport const validateForm=(fields,validations)=>{const errors={};let isValid=true;Object.keys(validations).forEach(fieldName=>{const value=fields[fieldName];const[valid,errorMessage]=validations[fieldName](value);if(!valid){errors[fieldName]=errorMessage;isValid=false;}});return{isValid,errors};};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","isValidPassword","password","passwordRegex","isValidUsername","username","usernameRegex","isValidDeviceName","name","trim","length","isValidPetName","isValidTime","time","timeRegex","isValidDate","date","dateRegex","d","Date","isNaN","getTime","isRequired","value","undefined","isNumeric","Number","isInRange","min","max","isValidSSID","ssid","isValidWiFiPassword","validateForm","fields","validations","errors","isValid","Object","keys","forEach","fieldName","valid","errorMessage"],"sources":["/workspaces/Smart_Pet_Feeder/src/utils/validation.ts"],"sourcesContent":["// Email validation\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation (at least 8 characters, including number/special char)\nexport const isValidPassword = (password: string): boolean => {\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d|\\W).{8,}$/;\n  return passwordRegex.test(password);\n};\n\n// Username validation (alphanumeric, underscore, hyphen, 3-20 chars)\nexport const isValidUsername = (username: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_-]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\n// Device name validation (2-30 chars)\nexport const isValidDeviceName = (name: string): boolean => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Pet name validation (2-30 chars)\nexport const isValidPetName = (name: string): boolean => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Time validation (HH:MM format)\nexport const isValidTime = (time: string): boolean => {\n  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  return timeRegex.test(time);\n};\n\n// Date validation (YYYY-MM-DD format)\nexport const isValidDate = (date: string): boolean => {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) return false;\n\n  const d = new Date(date);\n  return d instanceof Date && !isNaN(d.getTime());\n};\n\n// Field required validation\nexport const isRequired = (value: string | number): boolean => {\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  return value !== undefined && value !== null;\n};\n\n// Numeric value validation\nexport const isNumeric = (value: string): boolean => {\n  return !isNaN(Number(value));\n};\n\n// Range validation\nexport const isInRange = (value: number, min: number, max: number): boolean => {\n  return value >= min && value <= max;\n};\n\n// WiFi SSID validation\nexport const isValidSSID = (ssid: string): boolean => {\n  return ssid.trim().length >= 1 && ssid.trim().length <= 32;\n};\n\n// WiFi password validation\nexport const isValidWiFiPassword = (password: string): boolean => {\n  return password.length >= 8;\n};\n\n// Validate form fields\nexport type ValidationResult = {\n  isValid: boolean;\n  errors: Record<string, string>;\n};\n\nexport const validateForm = (\n  fields: Record<string, any>,\n  validations: Record<string, (value: any) => [boolean, string]>\n): ValidationResult => {\n  const errors: Record<string, string> = {};\n  let isValid = true;\n\n  Object.keys(validations).forEach((fieldName) => {\n    const value = fields[fieldName];\n    const [valid, errorMessage] = validations[fieldName](value);\n    \n    if (!valid) {\n      errors[fieldName] = errorMessage;\n      isValid = false;\n    }\n  });\n\n  return {\n    isValid,\n    errors\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
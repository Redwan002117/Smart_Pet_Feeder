{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against a reliable time server\nexport const checkSystemClock = async () => {\n  try {\n    const response = await fetch('https://worldtimeapi.org/api/ip');\n    const data = await response.json();\n    if (data && data.unixtime) {\n      const serverTime = data.unixtime;\n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      if (skew > 60) {\n        // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n    }\n    return {\n      hasSkew: false\n    };\n  } catch (error) {\n    console.error('Failed to check system clock:', error);\n    return {\n      hasSkew: false,\n      error: error\n    };\n  }\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","flowType","clockSkewTolerance","onAuthStateChange","event","session","console","log","now","Math","floor","Date","expiresAt","expires_at","warn","checkSystemClock","response","fetch","data","json","unixtime","serverTime","localTime","skew","abs","hasSkew","skewSeconds","error"],"sources":["/workspaces/Smart_Pet_Feeder/src/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n\ninterface ClockCheckResult {\n  hasSkew: boolean;\n  skewSeconds?: number;\n  serverTime?: number;\n  localTime?: number;\n  error?: Error;\n}\n\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    \n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against a reliable time server\nexport const checkSystemClock = async (): Promise<ClockCheckResult> => {\n  try {\n    const response = await fetch('https://worldtimeapi.org/api/ip');\n    const data = await response.json();\n    \n    if (data && data.unixtime) {\n      const serverTime = data.unixtime;\n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      \n      if (skew > 60) { // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n    }\n    return { hasSkew: false };\n  } catch (error) {\n    console.error('Failed to check system clock:', error);\n    return { hasSkew: false, error: error as Error };\n  }\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,uBAAuB;AAEpD,MAAMC,WAAW,GAAG,0CAA0C;AAC9D,MAAMC,eAAe,GAAG,kNAAkN;;AAE1O;AACA,OAAO,MAAMC,QAAQ,GAAGH,YAAY,CAACC,WAAW,EAAEC,eAAe,EAAE;EACjEE,IAAI,EAAE;IACJC,gBAAgB,EAAE,IAAI;IACtBC,cAAc,EAAE,IAAI;IACpBC,kBAAkB,EAAE,IAAI;IACxB;IACAC,QAAQ,EAAE,UAAU;IACpBC,kBAAkB,EAAE;EACtB;AACF,CAAC,CAAC;AAUF;AACAN,QAAQ,CAACC,IAAI,CAACM,iBAAiB,CAAC,CAACC,KAAK,EAAEC,OAAO,KAAK;EAClD,IAAID,KAAK,KAAK,iBAAiB,EAAE;IAC/BE,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;EACjD,CAAC,MAAM,IAAIH,KAAK,KAAK,WAAW,IAAIC,OAAO,EAAE;IAC3C;IACA,MAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;IACzC,MAAMI,SAAS,GAAGP,OAAO,CAACQ,UAAU;IAEpC,IAAID,SAAS,IAAIJ,GAAG,GAAGI,SAAS,EAAE;MAChCN,OAAO,CAACQ,IAAI,CAAC,6DAA6D,CAAC;IAC7E;IACA,IAAIF,SAAS,IAAIA,SAAS,GAAGJ,GAAG,GAAG,IAAI,GAAG,EAAE,EAAE;MAC5CF,OAAO,CAACQ,IAAI,CAAC,qEAAqE,CAAC;IACrF;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAA,KAAuC;EACrE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,CAAC;IAC/D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,IAAIA,IAAI,CAACE,QAAQ,EAAE;MACzB,MAAMC,UAAU,GAAGH,IAAI,CAACE,QAAQ;MAChC,MAAME,SAAS,GAAGb,IAAI,CAACC,KAAK,CAACC,IAAI,CAACH,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC;MAC/C,MAAMe,IAAI,GAAGd,IAAI,CAACe,GAAG,CAACH,UAAU,GAAGC,SAAS,CAAC;MAE7C,IAAIC,IAAI,GAAG,EAAE,EAAE;QAAE;QACfjB,OAAO,CAACQ,IAAI,CAAC,0BAA0BS,IAAI,iDAAiD,CAAC;QAC7F,OAAO;UACLE,OAAO,EAAE,IAAI;UACbC,WAAW,EAAEH,IAAI;UACjBF,UAAU;UACVC;QACF,CAAC;MACH;IACF;IACA,OAAO;MAAEG,OAAO,EAAE;IAAM,CAAC;EAC3B,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdrB,OAAO,CAACqB,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO;MAAEF,OAAO,EAAE,KAAK;MAAEE,KAAK,EAAEA;IAAe,CAAC;EAClD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
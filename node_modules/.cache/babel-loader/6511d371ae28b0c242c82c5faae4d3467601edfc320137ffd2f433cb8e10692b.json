{"ast":null,"code":"import{createClient}from'@supabase/supabase-js';const supabaseUrl='https://enxtmrpvfkkwikgiybsx.supabase.co';const supabaseAnonKey='eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';// Create the Supabase client with custom options for handling clock skew\nexport const supabase=createClient(supabaseUrl,supabaseAnonKey,{auth:{autoRefreshToken:true,persistSession:true,detectSessionInUrl:true,// Add tolerance for time skew between client and server (3600 seconds = 1 hour)\nflowType:'implicit',clockSkewTolerance:3600}});// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event,session)=>{if(event==='TOKEN_REFRESHED'){console.log('Token was refreshed successfully');}else if(event==='SIGNED_IN'&&session){// Log successful sign in but check for time issues\nconst now=Math.floor(Date.now()/1000);const expiresAt=session.expires_at;if(expiresAt&&now>expiresAt){console.warn('Session expiration time is in the past. Check system clock.');}if(expiresAt&&expiresAt-now>3600*24){console.warn('Session expiration time is far in the future. Potential clock skew.');}}});// Add a utility function to check system time against reliable time servers\nexport const checkSystemClock=async()=>{// Array of time API endpoints to try in order\nconst timeApis=[{url:'https://worldtimeapi.org/api/ip',extractTime:data=>data.unixtime},{url:'https://timeapi.io/api/Time/current/zone?timeZone=UTC',extractTime:data=>Math.floor(new Date(data.dateTime).getTime()/1000)},{url:'https://showcase.api.linx.twenty57.net/UnixTime/tounix?date=now',extractTime:data=>parseInt(data)}];// Try each API in sequence until one succeeds\nfor(const api of timeApis){try{console.log(`Attempting to fetch time from ${api.url}`);const controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),3000);// 3 second timeout\nconst response=await fetch(api.url,{signal:controller.signal,cache:'no-cache'});clearTimeout(timeoutId);if(!response.ok){console.warn(`Time API returned ${response.status}: ${response.statusText}`);continue;// Try next API\n}const data=await response.json();const serverTime=api.extractTime(data);if(!serverTime){console.warn(\"Could not extract time from API response\");continue;// Try next API\n}const localTime=Math.floor(Date.now()/1000);const skew=Math.abs(serverTime-localTime);console.log(`Time check successful. Server: ${serverTime}, Local: ${localTime}, Skew: ${skew}s`);if(skew>60){// More than 1 minute difference\nconsole.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);return{hasSkew:true,skewSeconds:skew,serverTime,localTime};}return{hasSkew:false};}catch(error){console.warn(`Failed to check time with ${api.url}:`,error);// Continue to next API\n}}// If all APIs fail, handle gracefully\nconsole.log(\"All time API checks failed. Assuming clock is correct.\");return{hasSkew:false,error:new Error(\"Could not verify system time - all time APIs failed\")};};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","flowType","clockSkewTolerance","onAuthStateChange","event","session","console","log","now","Math","floor","Date","expiresAt","expires_at","warn","checkSystemClock","timeApis","url","extractTime","data","unixtime","dateTime","getTime","parseInt","api","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","cache","clearTimeout","ok","status","statusText","json","serverTime","localTime","skew","abs","hasSkew","skewSeconds","error","Error"],"sources":["/workspaces/Smart_Pet_Feeder/src/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n\ninterface ClockCheckResult {\n  hasSkew: boolean;\n  skewSeconds?: number;\n  serverTime?: number;\n  localTime?: number;\n  error?: Error;\n}\n\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    \n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against reliable time servers\nexport const checkSystemClock = async (): Promise<ClockCheckResult> => {\n  // Array of time API endpoints to try in order\n  const timeApis = [\n    {\n      url: 'https://worldtimeapi.org/api/ip',\n      extractTime: (data: any) => data.unixtime\n    },\n    {\n      url: 'https://timeapi.io/api/Time/current/zone?timeZone=UTC',\n      extractTime: (data: any) => Math.floor(new Date(data.dateTime).getTime() / 1000)\n    },\n    {\n      url: 'https://showcase.api.linx.twenty57.net/UnixTime/tounix?date=now',\n      extractTime: (data: any) => parseInt(data)\n    }\n  ];\n\n  // Try each API in sequence until one succeeds\n  for (const api of timeApis) {\n    try {\n      console.log(`Attempting to fetch time from ${api.url}`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n      \n      const response = await fetch(api.url, { \n        signal: controller.signal,\n        cache: 'no-cache' \n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        console.warn(`Time API returned ${response.status}: ${response.statusText}`);\n        continue; // Try next API\n      }\n      \n      const data = await response.json();\n      const serverTime = api.extractTime(data);\n      \n      if (!serverTime) {\n        console.warn(\"Could not extract time from API response\");\n        continue; // Try next API\n      }\n      \n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      \n      console.log(`Time check successful. Server: ${serverTime}, Local: ${localTime}, Skew: ${skew}s`);\n      \n      if (skew > 60) { // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n      \n      return { hasSkew: false };\n    } catch (error) {\n      console.warn(`Failed to check time with ${api.url}:`, error);\n      // Continue to next API\n    }\n  }\n  \n  // If all APIs fail, handle gracefully\n  console.log(\"All time API checks failed. Assuming clock is correct.\");\n  return { \n    hasSkew: false, \n    error: new Error(\"Could not verify system time - all time APIs failed\") \n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"version":3,"file":"static/js/308.75df87e0.chunk.js","mappings":"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","sources":["pages/Dashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\nimport { Line, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Device, FeedingHistory, Schedule } from '../types';\nimport '../styles/Dashboard.css';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst Dashboard: React.FC = () => {\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [selectedDevice, setSelectedDevice] = useState<Device | null>(null);\n  const [feedingHistory, setFeedingHistory] = useState<FeedingHistory[]>([]);\n  const [upcomingSchedules, setUpcomingSchedules] = useState<Schedule[]>([]);\n  const [feedingAmount, setFeedingAmount] = useState<number>(10);\n  const [activeTab, setActiveTab] = useState<'manual' | 'scheduled'>('manual');\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const [isDispensing, setIsDispensing] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [currentPage, setCurrentPage] = useState<number>(1);\n  const [totalPages, setTotalPages] = useState<number>(1);\n  const [chartData, setChartData] = useState<any>(null);\n\n  const itemsPerPage = 5;\n\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      setIsLoading(true);\n      try {\n        // Get current user\n        const { data: { user } } = await supabase.auth.getUser();\n        if (!user) throw new Error('User not found');\n        \n        // Fetch devices\n        const { data: devicesData, error: devicesError } = await supabase\n          .from('devices')\n          .select('*')\n          .eq('user_id', user.id);\n          \n        if (devicesError) throw devicesError;\n        \n        if (devicesData && devicesData.length > 0) {\n          setDevices(devicesData);\n          setSelectedDevice(devicesData[0]);\n          \n          // Fetch feeding history for the first device\n          await fetchFeedingHistory(devicesData[0].device_id);\n          \n          // Fetch upcoming schedules for the first device\n          await fetchUpcomingSchedules(devicesData[0].device_id, user.id);\n        } else {\n          // No devices found\n          setDevices([]);\n          setSelectedDevice(null);\n        }\n      } catch (error: any) {\n        console.error('Error fetching data:', error);\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchInitialData();\n    \n    // Set up realtime subscriptions\n    const devicesSubscription = supabase\n      .channel('devices-changes')\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'devices' },\n        handleDeviceUpdate\n      )\n      .subscribe();\n      \n    const historySubscription = supabase\n      .channel('history-changes')\n      .on('postgres_changes',\n        { event: 'INSERT', schema: 'public', table: 'feeding_history' },\n        handleHistoryUpdate\n      )\n      .subscribe();\n      \n    const schedulesSubscription = supabase\n      .channel('schedules-changes')\n      .on('postgres_changes',\n        { event: '*', schema: 'public', table: 'schedules' },\n        handleScheduleUpdate\n      )\n      .subscribe();\n    \n    // Cleanup subscriptions\n    return () => {\n      devicesSubscription.unsubscribe();\n      historySubscription.unsubscribe();\n      schedulesSubscription.unsubscribe();\n    };\n  }, []);\n\n  // Handle realtime device updates\n  const handleDeviceUpdate = async (payload: any) => {\n    const { eventType, new: newDevice, old: oldDevice } = payload;\n    \n    // Update the devices list\n    if (eventType === 'INSERT') {\n      setDevices(prev => [...prev, newDevice]);\n    } else if (eventType === 'UPDATE') {\n      setDevices(prev => \n        prev.map(device => \n          device.device_id === newDevice.device_id ? newDevice : device\n        )\n      );\n      \n      // If this is the selected device, update it\n      if (selectedDevice && selectedDevice.device_id === newDevice.device_id) {\n        setSelectedDevice(newDevice);\n      }\n    } else if (eventType === 'DELETE') {\n      setDevices(prev => \n        prev.filter(device => device.device_id !== oldDevice.device_id)\n      );\n      \n      // If this was the selected device, select another one or null\n      if (selectedDevice && selectedDevice.device_id === oldDevice.device_id) {\n        const { data: { user } } = await supabase.auth.getUser();\n        const { data } = await supabase\n          .from('devices')\n          .select('*')\n          .eq('user_id', user?.id)\n          .limit(1);\n          \n        setSelectedDevice(data && data.length > 0 ? data[0] : null);\n      }\n    }\n  };\n  \n  // Handle realtime feeding history updates\n  const handleHistoryUpdate = (payload: any) => {\n    const { new: newFeeding } = payload;\n    \n    // Only update if it's for the selected device\n    if (selectedDevice && newFeeding.device_id === selectedDevice.device_id) {\n      setFeedingHistory(prev => [newFeeding, ...prev.slice(0, itemsPerPage - 1)]);\n      \n      // Update chart data\n      updateChartData([newFeeding, ...feedingHistory]);\n    }\n  };\n  \n  // Handle realtime schedule updates\n  const handleScheduleUpdate = (payload: any) => {\n    const { eventType, new: newSchedule, old: oldSchedule } = payload;\n    \n    // Only update if it's for the selected device\n    if (!selectedDevice) return;\n    \n    if (eventType === 'INSERT' && newSchedule.device_id === selectedDevice.device_id) {\n      setUpcomingSchedules(prev => {\n        const updated = [...prev, newSchedule]\n          .sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime())\n          .filter(schedule => new Date(schedule.time) > new Date())\n          .slice(0, 2);\n        return updated;\n      });\n    } else if (eventType === 'UPDATE' && newSchedule.device_id === selectedDevice.device_id) {\n      setUpcomingSchedules(prev => {\n        const updated = prev\n          .map(schedule => schedule.schedule_id === newSchedule.schedule_id ? newSchedule : schedule)\n          .sort((a, b) => new Date(a.time).getTime() - new Date(b.time).getTime())\n          .filter(schedule => new Date(schedule.time) > new Date())\n          .slice(0, 2);\n        return updated;\n      });\n    } else if (eventType === 'DELETE') {\n      setUpcomingSchedules(prev => \n        prev.filter(schedule => schedule.schedule_id !== oldSchedule.schedule_id)\n      );\n    }\n  };\n\n  // Fetch feeding history for a specific device\n  const fetchFeedingHistory = async (deviceId: string, page: number = 1) => {\n    try {\n      // Calculate pagination\n      const from = (page - 1) * itemsPerPage;\n      const to = from + itemsPerPage - 1;\n      \n      // Get total count first\n      const { count, error: countError } = await supabase\n        .from('feeding_history')\n        .select('*', { count: 'exact', head: true })\n        .eq('device_id', deviceId);\n        \n      if (countError) throw countError;\n      \n      setTotalPages(Math.ceil((count || 0) / itemsPerPage));\n      \n      // Fetch the actual data\n      const { data, error } = await supabase\n        .from('feeding_history')\n        .select('*')\n        .eq('device_id', deviceId)\n        .order('time', { ascending: false })\n        .range(from, to);\n        \n      if (error) throw error;\n      \n      setFeedingHistory(data || []);\n      setCurrentPage(page);\n      \n      // Update chart data\n      updateChartData(data || []);\n    } catch (error: any) {\n      console.error('Error fetching feeding history:', error);\n      setError('Failed to load feeding history');\n    }\n  };\n\n  // Fetch upcoming schedules for a specific device\n  const fetchUpcomingSchedules = async (deviceId: string, userId: string) => {\n    try {\n      const now = new Date().toISOString();\n      \n      const { data, error } = await supabase\n        .from('schedules')\n        .select('*')\n        .eq('device_id', deviceId)\n        .eq('user_id', userId)\n        .gt('time', now)\n        .order('time')\n        .limit(2);\n        \n      if (error) throw error;\n      \n      setUpcomingSchedules(data || []);\n    } catch (error: any) {\n      console.error('Error fetching upcoming schedules:', error);\n      setError('Failed to load upcoming schedules');\n    }\n  };\n\n  // Update chart data based on feeding history\n  const updateChartData = (history: FeedingHistory[]) => {\n    // Group by date and calculate total amounts\n    const dailyData = history.reduce((acc: {[key: string]: number}, item) => {\n      const date = new Date(item.time).toLocaleDateString();\n      acc[date] = (acc[date] || 0) + item.amount;\n      return acc;\n    }, {});\n    \n    // Prepare chart data\n    const labels = Object.keys(dailyData).sort((a, b) => \n      new Date(a).getTime() - new Date(b).getTime()\n    ).slice(-7); // Last 7 days\n    \n    const amounts = labels.map(date => dailyData[date] || 0);\n    \n    setChartData({\n      labels,\n      datasets: [\n        {\n          label: 'Food Dispensed (g)',\n          data: amounts,\n          fill: false,\n          backgroundColor: 'rgba(255, 206, 86, 0.2)',\n          borderColor: 'rgba(255, 206, 86, 1)',\n          tension: 0.1\n        }\n      ]\n    });\n  };\n\n  // Handle device selection change\n  const handleDeviceChange = async (deviceId: string) => {\n    const device = devices.find(d => d.device_id === deviceId);\n    if (device) {\n      setSelectedDevice(device);\n      \n      // Reset pagination\n      setCurrentPage(1);\n      \n      // Fetch data for the selected device\n      const { data: { user } } = await supabase.auth.getUser();\n      if (user) {\n        await fetchFeedingHistory(deviceId);\n        await fetchUpcomingSchedules(deviceId, user.id);\n      }\n    }\n  };\n\n  // Dispense food manually\n  const handleDispense = async () => {\n    if (!selectedDevice) return;\n    \n    try {\n      setIsDispensing(true);\n      \n      // Update device status with dispense command\n      const { error } = await supabase\n        .from('devices')\n        .update({\n          last_status: {\n            ...selectedDevice.last_status,\n            command: 'dispense',\n            command_amount: feedingAmount\n          }\n        })\n        .eq('device_id', selectedDevice.device_id);\n        \n      if (error) throw error;\n      \n      // Record the feeding in history\n      const { error: historyError } = await supabase\n        .from('feeding_history')\n        .insert([{\n          device_id: selectedDevice.device_id,\n          time: new Date().toISOString(),\n          amount: feedingAmount,\n          manual: true\n        }]);\n        \n      if (historyError) throw historyError;\n      \n      // Show success message\n      alert(`Dispensing ${feedingAmount}g of food!`);\n    } catch (error: any) {\n      console.error('Error dispensing food:', error);\n      setError('Failed to dispense food');\n    } finally {\n      setIsDispensing(false);\n    }\n  };\n\n  // Format date and time for display\n  const formatDateTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleString();\n  };\n\n  // Handle pagination\n  const handlePageChange = (page: number) => {\n    if (selectedDevice) {\n      fetchFeedingHistory(selectedDevice.device_id, page);\n    }\n  };\n\n  // Render device status\n  const renderDeviceStatus = () => {\n    if (!selectedDevice) {\n      return (\n        <div className=\"no-devices-message\">\n          <i className=\"icon-device-off\"></i>\n          <h3>No devices found</h3>\n          <p>Connect your first Pet Feeder device to get started!</p>\n          <Link to=\"/device-setup\" className=\"btn btn-primary\">Add Device</Link>\n        </div>\n      );\n    }\n\n    const { last_status } = selectedDevice;\n    const foodLevel = last_status?.food_level || 0;\n    const wifiStrength = last_status?.wifi_strength || 0;\n    const lastUpdate = last_status?.last_update \n      ? new Date(parseInt(last_status.last_update) * 1000).toLocaleString()\n      : 'Unknown';\n\n    return (\n      <div className=\"device-status-card\">\n        <div className=\"device-status-header\">\n          <h3>{selectedDevice.device_name}</h3>\n          <span className={`device-status ${foodLevel > 0 ? 'online' : 'offline'}`}>\n            {foodLevel > 0 ? 'Online' : 'Offline'}\n          </span>\n        </div>\n        \n        <div className=\"device-status-grid\">\n          <div className=\"status-item\">\n            <div className=\"status-icon\">\n              <i className=\"icon-food\"></i>\n            </div>\n            <div className=\"status-info\">\n              <h4>Food Level</h4>\n              <div className=\"progress-bar\">\n                <div \n                  className=\"progress-fill\" \n                  style={{ width: `${foodLevel}%` }}\n                  data-level={`${foodLevel}%`}\n                ></div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"status-item\">\n            <div className=\"status-icon\">\n              <i className=\"icon-wifi\"></i>\n            </div>\n            <div className=\"status-info\">\n              <h4>WiFi Signal</h4>\n              <div className=\"wifi-strength\">\n                {Array.from({ length: 4 }).map((_, i) => (\n                  <div \n                    key={i}\n                    className={`wifi-bar ${i < Math.ceil(wifiStrength / 25) ? 'active' : ''}`}\n                  ></div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"status-item\">\n            <div className=\"status-icon\">\n              <i className=\"icon-clock\"></i>\n            </div>\n            <div className=\"status-info\">\n              <h4>Last Update</h4>\n              <p>{lastUpdate}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // Render device selector\n  const renderDeviceSelector = () => {\n    if (devices.length <= 1) return null;\n    \n    return (\n      <div className=\"device-selector\">\n        <label htmlFor=\"device-select\">Select Device:</label>\n        <select \n          id=\"device-select\"\n          value={selectedDevice?.device_id || ''}\n          onChange={(e) => handleDeviceChange(e.target.value)}\n        >\n          {devices.map((device) => (\n            <option key={device.device_id} value={device.device_id}>\n              {device.device_name}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  };\n\n  // Render feeding controls\n  const renderFeedingControls = () => {\n    if (!selectedDevice) return null;\n    \n    return (\n      <div className=\"feeding-controls-card\">\n        <div className=\"tab-navigation\">\n          <button \n            className={`tab-button ${activeTab === 'manual' ? 'active' : ''}`}\n            onClick={() => setActiveTab('manual')}\n          >\n            <i className=\"icon-hand\"></i> Manual Feeding\n          </button>\n          <button \n            className={`tab-button ${activeTab === 'scheduled' ? 'active' : ''}`}\n            onClick={() => setActiveTab('scheduled')}\n          >\n            <i className=\"icon-calendar\"></i> Scheduled Feeding\n          </button>\n        </div>\n        \n        <div className=\"tab-content\">\n          {activeTab === 'manual' ? (\n            <div className=\"manual-feeding\">\n              <div className=\"amount-selector\">\n                <h4>Amount to dispense (grams):</h4>\n                <div className=\"amount-controls\">\n                  <button \n                    className=\"btn btn-circle\" \n                    onClick={() => setFeedingAmount(prev => Math.max(5, prev - 5))}\n                    disabled={isDispensing}\n                  >\n                    -\n                  </button>\n                  <input \n                    type=\"number\" \n                    value={feedingAmount} \n                    onChange={(e) => setFeedingAmount(Math.max(5, Math.min(100, parseInt(e.target.value) || 5)))}\n                    min=\"5\"\n                    max=\"100\"\n                    disabled={isDispensing}\n                  />\n                  <button \n                    className=\"btn btn-circle\" \n                    onClick={() => setFeedingAmount(prev => Math.min(100, prev + 5))}\n                    disabled={isDispensing}\n                  >\n                    +\n                  </button>\n                </div>\n              </div>\n              \n              <button \n                className=\"btn btn-primary btn-dispense\" \n                onClick={handleDispense}\n                disabled={isDispensing}\n              >\n                {isDispensing ? 'Dispensing...' : 'Dispense Now'}\n              </button>\n            </div>\n          ) : (\n            <div className=\"scheduled-feeding\">\n              <h4>Upcoming Feedings</h4>\n              {upcomingSchedules.length > 0 ? (\n                <ul className=\"schedule-list\">\n                  {upcomingSchedules.map((schedule) => (\n                    <li key={schedule.schedule_id} className=\"schedule-item\">\n                      <div className=\"schedule-time\">\n                        <i className=\"icon-clock\"></i>\n                        {formatDateTime(schedule.time)}\n                      </div>\n                      <div className=\"schedule-amount\">\n                        <i className=\"icon-food\"></i>\n                        {schedule.amount}g\n                      </div>\n                    </li>\n                  ))}\n                </ul>\n              ) : (\n                <p className=\"no-schedules-message\">No upcoming feedings scheduled.</p>\n              )}\n              <Link to=\"/schedule\" className=\"btn btn-outline\">\n                Manage Schedules\n              </Link>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  };\n\n  // Render feeding history\n  const renderFeedingHistory = () => {\n    if (!selectedDevice) return null;\n    \n    return (\n      <div className=\"feeding-history-card\">\n        <h3>Recent Feedings</h3>\n        \n        {feedingHistory.length > 0 ? (\n          <>\n            <div className=\"feeding-table\">\n              <div className=\"feeding-table-header\">\n                <div className=\"table-cell\">Time</div>\n                <div className=\"table-cell\">Amount</div>\n                <div className=\"table-cell\">Type</div>\n              </div>\n              \n              {feedingHistory.map((feeding) => (\n                <div key={feeding.feed_id} className=\"feeding-table-row\">\n                  <div className=\"table-cell\">{formatDateTime(feeding.time)}</div>\n                  <div className=\"table-cell\">{feeding.amount}g</div>\n                  <div className=\"table-cell\">{feeding.manual ? 'Manual' : 'Scheduled'}</div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"pagination\">\n              <button \n                className=\"btn btn-sm\" \n                disabled={currentPage === 1}\n                onClick={() => handlePageChange(currentPage - 1)}\n              >\n                Previous\n              </button>\n              <span className=\"page-info\">Page {currentPage} of {totalPages}</span>\n              <button \n                className=\"btn btn-sm\" \n                disabled={currentPage === totalPages}\n                onClick={() => handlePageChange(currentPage + 1)}\n              >\n                Next\n              </button>\n            </div>\n          </>\n        ) : (\n          <p className=\"no-history-message\">No feeding history available yet.</p>\n        )}\n        \n        <Link to=\"/history\" className=\"btn btn-text\">View Full History</Link>\n      </div>\n    );\n  };\n\n  // Render feeding chart\n  const renderFeedingChart = () => {\n    if (!selectedDevice || !chartData) return null;\n    \n    const chartOptions = {\n      responsive: true,\n      maintainAspectRatio: false,\n      plugins: {\n        legend: {\n          position: 'top' as const,\n        },\n        title: {\n          display: true,\n          text: '7-Day Feeding Trend',\n        },\n      },\n      scales: {\n        y: {\n          beginAtZero: true,\n          title: {\n            display: true,\n            text: 'Food Amount (g)'\n          }\n        }\n      }\n    };\n    \n    return (\n      <div className=\"chart-card\">\n        <h3>Feeding Analysis</h3>\n        \n        <div className=\"chart-container\">\n          <Line data={chartData} options={chartOptions} />\n        </div>\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading dashboard...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <i className=\"icon-warning\"></i>\n        <h2>Something went wrong</h2>\n        <p>{error}</p>\n        <button className=\"btn btn-primary\" onClick={() => window.location.reload()}>\n          Try Again\n        </button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"dashboard-container\">\n      <div className=\"dashboard-header\">\n        <h1>Dashboard</h1>\n        {renderDeviceSelector()}\n      </div>\n      \n      <div className=\"dashboard-grid\">\n        <div className=\"grid-item status\">{renderDeviceStatus()}</div>\n        <div className=\"grid-item controls\">{renderFeedingControls()}</div>\n        <div className=\"grid-item history\">{renderFeedingHistory()}</div>\n        <div className=\"grid-item chart\">{renderFeedingChart()}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","BarElement","Title","Tooltip","Legend","Dashboard","devices","setDevices","useState","selectedDevice","setSelectedDevice","feedingHistory","setFeedingHistory","upcomingSchedules","setUpcomingSchedules","feedingAmount","setFeedingAmount","activeTab","setActiveTab","isLoading","setIsLoading","isDispensing","setIsDispensing","error","setError","currentPage","setCurrentPage","totalPages","setTotalPages","chartData","setChartData","useEffect","async","data","user","supabase","auth","getUser","Error","devicesData","devicesError","from","select","eq","id","length","fetchFeedingHistory","device_id","fetchUpcomingSchedules","console","message","fetchInitialData","devicesSubscription","channel","on","event","schema","table","handleDeviceUpdate","subscribe","historySubscription","handleHistoryUpdate","schedulesSubscription","handleScheduleUpdate","unsubscribe","eventType","new","newDevice","old","oldDevice","payload","prev","map","device","filter","limit","newFeeding","slice","itemsPerPage","updateChartData","newSchedule","oldSchedule","sort","a","b","Date","time","getTime","schedule","schedule_id","deviceId","page","arguments","undefined","to","count","countError","head","Math","ceil","order","ascending","range","userId","now","toISOString","gt","history","dailyData","reduce","acc","item","date","toLocaleDateString","amount","labels","Object","keys","amounts","datasets","label","fill","backgroundColor","borderColor","tension","handleDispense","update","last_status","command","command_amount","historyError","insert","manual","alert","formatDateTime","dateString","toLocaleString","handlePageChange","_jsxs","className","children","_jsx","onClick","window","location","reload","htmlFor","value","onChange","e","find","d","handleDeviceChange","target","device_name","renderDeviceStatus","Link","foodLevel","food_level","wifiStrength","wifi_strength","lastUpdate","last_update","parseInt","style","width","Array","_","i","max","disabled","type","min","_Fragment","feeding","feed_id","renderFeedingChart","Line","options","responsive","maintainAspectRatio","plugins","legend","position","title","display","text","scales","y","beginAtZero"],"sourceRoot":""}
{"ast":null,"code":"var _jsxFileName = \"/workspaces/Smart_Pet_Feeder/src/components/AdminRoute.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AdminRoute = ({\n  children,\n  session\n}) => {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      if (!session) {\n        setIsAdmin(false);\n        setLoading(false);\n        return;\n      }\n      try {\n        // Check if the user is admin - this depends on your admin identification logic\n        const {\n          data,\n          error\n        } = await supabase.from('profiles').select('role').eq('id', session.user.id).single();\n        if (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        } else {\n          // Check if this is the admin email or username\n          const isAdminUser = session.user.email === 'petfeeder@redwancodes.com' || (data === null || data === void 0 ? void 0 : data.role) === 'admin';\n          setIsAdmin(isAdminUser);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setIsAdmin(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAdminStatus();\n  }, [session]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 12\n    }, this);\n  }\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: children\n  }, void 0, false);\n};\n_s(AdminRoute, \"eyQA4gsUNqx73eGpfFsgdpbMX0M=\");\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","supabase","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminRoute","children","session","_s","isAdmin","setIsAdmin","loading","setLoading","checkAdminStatus","data","error","from","select","eq","user","id","single","console","isAdminUser","email","role","className","fileName","_jsxFileName","lineNumber","columnNumber","to","_c","$RefreshReg$"],"sources":["/workspaces/Smart_Pet_Feeder/src/components/AdminRoute.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Navigate } from 'react-router-dom';\nimport { Session } from '@supabase/supabase-js';\nimport { supabase } from '../supabaseClient.ts';\n\ninterface AdminRouteProps {\n  children: React.ReactNode;\n  session: Session | null;\n}\n\nconst AdminRoute: React.FC<AdminRouteProps> = ({ children, session }) => {\n  const [isAdmin, setIsAdmin] = useState<boolean | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const checkAdminStatus = async () => {\n      if (!session) {\n        setIsAdmin(false);\n        setLoading(false);\n        return;\n      }\n\n      try {\n        // Check if the user is admin - this depends on your admin identification logic\n        const { data, error } = await supabase\n          .from('profiles')\n          .select('role')\n          .eq('id', session.user.id)\n          .single();\n\n        if (error) {\n          console.error('Error checking admin status:', error);\n          setIsAdmin(false);\n        } else {\n          // Check if this is the admin email or username\n          const isAdminUser = \n            session.user.email === 'petfeeder@redwancodes.com' || \n            data?.role === 'admin';\n          \n          setIsAdmin(isAdminUser);\n        }\n      } catch (error) {\n        console.error('Error:', error);\n        setIsAdmin(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    checkAdminStatus();\n  }, [session]);\n\n  if (loading) {\n    return <div className=\"loading\">Loading...</div>;\n  }\n\n  if (!isAdmin) {\n    return <Navigate to=\"/dashboard\" />;\n  }\n  \n  return <>{children}</>;\n};\n\nexport default AdminRoute;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAE3C,SAASC,QAAQ,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAOhD,MAAMC,UAAqC,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACvE,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAiB,IAAI,CAAC;EAC5D,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI,CAACN,OAAO,EAAE;QACZG,UAAU,CAAC,KAAK,CAAC;QACjBE,UAAU,CAAC,KAAK,CAAC;QACjB;MACF;MAEA,IAAI;QACF;QACA,MAAM;UAAEE,IAAI;UAAEC;QAAM,CAAC,GAAG,MAAMf,QAAQ,CACnCgB,IAAI,CAAC,UAAU,CAAC,CAChBC,MAAM,CAAC,MAAM,CAAC,CACdC,EAAE,CAAC,IAAI,EAAEX,OAAO,CAACY,IAAI,CAACC,EAAE,CAAC,CACzBC,MAAM,CAAC,CAAC;QAEX,IAAIN,KAAK,EAAE;UACTO,OAAO,CAACP,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACpDL,UAAU,CAAC,KAAK,CAAC;QACnB,CAAC,MAAM;UACL;UACA,MAAMa,WAAW,GACfhB,OAAO,CAACY,IAAI,CAACK,KAAK,KAAK,2BAA2B,IAClD,CAAAV,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEW,IAAI,MAAK,OAAO;UAExBf,UAAU,CAACa,WAAW,CAAC;QACzB;MACF,CAAC,CAAC,OAAOR,KAAK,EAAE;QACdO,OAAO,CAACP,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;QAC9BL,UAAU,CAAC,KAAK,CAAC;MACnB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,CAACN,OAAO,CAAC,CAAC;EAEb,IAAII,OAAO,EAAE;IACX,oBAAOT,OAAA;MAAKwB,SAAS,EAAC,SAAS;MAAApB,QAAA,EAAC;IAAU;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAClD;EAEA,IAAI,CAACrB,OAAO,EAAE;IACZ,oBAAOP,OAAA,CAACH,QAAQ;MAACgC,EAAE,EAAC;IAAY;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACrC;EAEA,oBAAO5B,OAAA,CAAAE,SAAA;IAAAE,QAAA,EAAGA;EAAQ,gBAAG,CAAC;AACxB,CAAC;AAACE,EAAA,CAnDIH,UAAqC;AAAA2B,EAAA,GAArC3B,UAAqC;AAqD3C,eAAeA,UAAU;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
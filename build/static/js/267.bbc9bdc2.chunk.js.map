{"version":3,"file":"static/js/267.bbc9bdc2.chunk.js","mappings":"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","sources":["pages/Settings.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { useNavigate } from 'react-router-dom';\nimport '../styles/Settings.css';\n\nconst Settings: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [userProfile, setUserProfile] = useState<any>(null);\n  const [notificationPrefs, setNotificationPrefs] = useState<any>({});\n  const [activeTab, setActiveTab] = useState<string>('notifications');\n  const [currentPassword, setCurrentPassword] = useState<string>('');\n  const [newPassword, setNewPassword] = useState<string>('');\n  const [confirmPassword, setConfirmPassword] = useState<string>('');\n  const [twoFactorEnabled, setTwoFactorEnabled] = useState<boolean>(false);\n  const [showTwoFactorSetup, setShowTwoFactorSetup] = useState<boolean>(false);\n  const [twoFactorQRCode, setTwoFactorQRCode] = useState<string | null>(null);\n  const [twoFactorSecret, setTwoFactorSecret] = useState<string | null>(null);\n  const [twoFactorCode, setTwoFactorCode] = useState<string>('');\n  const [sessions, setSessions] = useState<any[]>([]);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState<boolean>(false);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    fetchUserProfile();\n    fetchNotificationPreferences();\n    fetchSessions();\n  }, []);\n\n  const fetchUserProfile = async () => {\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { data, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n        \n      if (error) throw error;\n      \n      setUserProfile(data);\n      setTwoFactorEnabled(data.two_factor_enabled);\n    } catch (err: any) {\n      console.error('Error fetching user profile:', err);\n      setError(err.message || 'Failed to load user profile');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchNotificationPreferences = async () => {\n    try {\n      setLoading(true);\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { data, error } = await supabase\n        .from('notification_preferences')\n        .select('*')\n        .eq('user_id', user.id)\n        .single();\n        \n      if (error) throw error;\n      \n      setNotificationPrefs(data);\n    } catch (err: any) {\n      console.error('Error fetching notification preferences:', err);\n      setError(err.message || 'Failed to load notification preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchSessions = async () => {\n    try {\n      setLoading(true);\n      // In newer Supabase versions, we don't have getSessionList API\n      // Instead, we can just get the current session\n      const { data: { session } } = await supabase.auth.getSession();\n      if (!session) throw new Error('No active session');\n      \n      // Create a sessions array with just the current session\n      setSessions([{\n        id: session.access_token,\n        created_at: session.created_at,\n        browser: navigator.userAgent.match(/chrome|firefox|safari|edge|opera/i)?.[0] || 'Unknown',\n        os: navigator.platform || 'Unknown',\n        current: true\n      }]);\n    } catch (err: any) {\n      console.error('Error fetching session:', err);\n      setError(err.message || 'Failed to load sessions');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateNotificationPreference = async (key: string, value: boolean) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { error } = await supabase\n        .from('notification_preferences')\n        .update({ [key]: value })\n        .eq('user_id', user.id);\n        \n      if (error) throw error;\n      \n      setNotificationPrefs((prev: any) => ({ ...prev, [key]: value }));\n      setSuccess('Notification preferences updated successfully');\n    } catch (err: any) {\n      console.error('Error updating notification preferences:', err);\n      setError(err.message || 'Failed to update notification preferences');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleChangePassword = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (newPassword !== confirmPassword) {\n      setError('New password and confirm password do not match');\n      return;\n    }\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { error } = await supabase.auth.updateUser({\n        password: newPassword\n      });\n      \n      if (error) throw error;\n      \n      setSuccess('Password updated successfully');\n      setCurrentPassword('');\n      setNewPassword('');\n      setConfirmPassword('');\n    } catch (err: any) {\n      console.error('Error changing password:', err);\n      setError(err.message || 'Failed to change password');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleSetup2FA = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Inform user that 2FA setup is not available in the current version\n      setError('Two-factor authentication setup is not available in the current version of Supabase.');\n      setShowTwoFactorSetup(false);\n      \n    } catch (err: any) {\n      console.error('Error setting up 2FA:', err);\n      setError(err.message || 'Failed to set up 2FA');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleEnable2FA = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Inform user that 2FA is not available\n      setError('Two-factor authentication is not available in the current version of Supabase.');\n      setShowTwoFactorSetup(false);\n      \n    } catch (err: any) {\n      console.error('Error enabling 2FA:', err);\n      setError(err.message || 'Failed to enable 2FA');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleDisable2FA = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // Inform user that 2FA is not available\n      setError('Two-factor authentication is not available in the current version of Supabase.');\n      \n    } catch (err: any) {\n      console.error('Error disabling 2FA:', err);\n      setError(err.message || 'Failed to disable 2FA');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleLogoutOtherSessions = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      // In newer Supabase, we can't directly log out other sessions\n      // Instead, show a message that this feature is unavailable\n      setSuccess('This feature is not available in the current version');\n      \n    } catch (err: any) {\n      console.error('Error:', err);\n      setError(err.message || 'Feature not available');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete account\n  const handleDeleteAccount = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      if (!showDeleteConfirm) {\n        setShowDeleteConfirm(true);\n        setLoading(false);\n        return;\n      }\n      \n      // Delete all user data\n      if (!userProfile) return;\n      \n      // Delete from database\n      const { error: devicesError } = await supabase\n        .from('devices')\n        .delete()\n        .eq('user_id', userProfile.id);\n        \n      if (devicesError) throw devicesError;\n      \n      const { error: petsError } = await supabase\n        .from('pets')\n        .delete()\n        .eq('user_id', userProfile.id);\n        \n      if (petsError) throw petsError;\n      \n      const { error: schedulesError } = await supabase\n        .from('schedules')\n        .delete()\n        .eq('user_id', userProfile.id);\n        \n      if (schedulesError) throw schedulesError;\n      \n      const { error: notifError } = await supabase\n        .from('notification_preferences')\n        .delete()\n        .eq('user_id', userProfile.id);\n        \n      if (notifError) throw notifError;\n      \n      const { error: profileError } = await supabase\n        .from('profiles')\n        .delete()\n        .eq('id', userProfile.id);\n        \n      if (profileError) throw profileError;\n      \n      // Finally, delete the user authentication\n      const { error } = await supabase.auth.admin.deleteUser(userProfile.id);\n      if (error) throw error;\n      \n      // Sign out\n      await supabase.auth.signOut();\n      \n      // Navigate to home page\n      navigate('/', { replace: true });\n    } catch (err: any) {\n      console.error('Error deleting account:', err);\n      setError(err.message || 'Failed to delete account');\n      setShowDeleteConfirm(false);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Format date\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  if (loading && !userProfile) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading settings...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-container\">\n      <div className=\"settings-header\">\n        <h1>Settings</h1>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-alert\">\n          <i className=\"icon-check-circle\"></i>\n          <p>{success}</p>\n          <button \n            className=\"success-close\" \n            onClick={() => setSuccess(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      <div className=\"settings-content\">\n        <div className=\"settings-sidebar\">\n          <button \n            className={`settings-tab ${activeTab === 'notifications' ? 'active' : ''}`}\n            onClick={() => setActiveTab('notifications')}\n          >\n            <i className=\"icon-bell\"></i>\n            <span>Notifications</span>\n          </button>\n          <button \n            className={`settings-tab ${activeTab === 'security' ? 'active' : ''}`}\n            onClick={() => setActiveTab('security')}\n          >\n            <i className=\"icon-lock\"></i>\n            <span>Security</span>\n          </button>\n          <button \n            className={`settings-tab ${activeTab === 'account' ? 'active' : ''}`}\n            onClick={() => setActiveTab('account')}\n          >\n            <i className=\"icon-user\"></i>\n            <span>Account</span>\n          </button>\n        </div>\n        \n        <div className=\"settings-main\">\n          {activeTab === 'notifications' && (\n            <div className=\"settings-section\">\n              <h2>Notification Preferences</h2>\n              <p className=\"section-description\">\n                Choose how and when you receive notifications about your pet feeder.\n              </p>\n              \n              <div className=\"settings-group\">\n                <h3>Notification Channels</h3>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Email Notifications</div>\n                    <div className=\"setting-description\">Receive notifications about your pet feeder via email</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={notificationPrefs.email_notifications}\n                      onChange={() => updateNotificationPreference('email_notifications', !notificationPrefs.email_notifications)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Push Notifications</div>\n                    <div className=\"setting-description\">Receive in-browser push notifications</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={notificationPrefs.push_notifications}\n                      onChange={() => updateNotificationPreference('push_notifications', !notificationPrefs.push_notifications)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n              </div>\n              \n              <div className=\"settings-group\">\n                <h3>Notification Types</h3>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Low Food Alert</div>\n                    <div className=\"setting-description\">Get notified when food level is running low</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={notificationPrefs.low_food_alert}\n                      onChange={() => updateNotificationPreference('low_food_alert', !notificationPrefs.low_food_alert)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Feeding Complete Alert</div>\n                    <div className=\"setting-description\">Get notified when a feeding is completed</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={notificationPrefs.feeding_complete_alert}\n                      onChange={() => updateNotificationPreference('feeding_complete_alert', !notificationPrefs.feeding_complete_alert)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Schedule Reminders</div>\n                    <div className=\"setting-description\">Get reminded shortly before scheduled feedings</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={notificationPrefs.schedule_reminder}\n                      onChange={() => updateNotificationPreference('schedule_reminder', !notificationPrefs.schedule_reminder)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'security' && (\n            <div className=\"settings-section\">\n              <h2>Security Settings</h2>\n              <p className=\"section-description\">\n                Manage your account security settings and authentication methods.\n              </p>\n              \n              <div className=\"settings-group\">\n                <h3>Change Password</h3>\n                <form onSubmit={handleChangePassword} className=\"security-form\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"current-password\">Current Password</label>\n                    <input\n                      id=\"current-password\"\n                      type=\"password\"\n                      value={currentPassword}\n                      onChange={(e) => setCurrentPassword(e.target.value)}\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"new-password\">New Password</label>\n                    <input\n                      id=\"new-password\"\n                      type=\"password\"\n                      value={newPassword}\n                      onChange={(e) => setNewPassword(e.target.value)}\n                      required\n                    />\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"confirm-password\">Confirm Password</label>\n                    <input\n                      id=\"confirm-password\"\n                      type=\"password\"\n                      value={confirmPassword}\n                      onChange={(e) => setConfirmPassword(e.target.value)}\n                      required\n                    />\n                  </div>\n                  \n                  <button \n                    type=\"submit\" \n                    className=\"btn btn-primary\"\n                    disabled={loading}\n                  >\n                    Update Password\n                  </button>\n                </form>\n              </div>\n              \n              <div className=\"settings-group\">\n                <h3>Two-Factor Authentication</h3>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Two-Factor Authentication</div>\n                    <div className=\"setting-description\">Add an extra layer of security to your account</div>\n                  </div>\n                  \n                  {twoFactorEnabled ? (\n                    <button \n                      className=\"btn btn-outline\"\n                      onClick={handleDisable2FA}\n                      disabled={loading}\n                    >\n                      Disable 2FA\n                    </button>\n                  ) : (\n                    <button \n                      className=\"btn btn-primary\"\n                      onClick={handleSetup2FA}\n                      disabled={loading}\n                    >\n                      Enable 2FA\n                    </button>\n                  )}\n                </div>\n                \n                {showTwoFactorSetup && (\n                  <div className=\"twofa-setup\">\n                    <h4>Set up Two-Factor Authentication</h4>\n                    <p>\n                      Scan the QR code with an authenticator app like Google Authenticator or Authy, \n                      then enter the 6-digit code to enable 2FA.\n                    </p>\n                    \n                    <div className=\"twofa-qr-container\">\n                      <img \n                        src={twoFactorQRCode || ''}\n                        alt=\"2FA QR Code\"\n                        className=\"twofa-qr\"\n                      />\n                    </div>\n                    \n                    {twoFactorSecret && (\n                      <div className=\"twofa-secret\">\n                        <p>Or enter this code manually:</p>\n                        <code>{twoFactorSecret}</code>\n                      </div>\n                    )}\n                    \n                    <form onSubmit={handleEnable2FA} className=\"twofa-form\">\n                      <div className=\"form-group\">\n                        <label htmlFor=\"twofa-code\">Verification Code</label>\n                        <input\n                          id=\"twofa-code\"\n                          type=\"text\"\n                          value={twoFactorCode}\n                          onChange={(e) => setTwoFactorCode(e.target.value)}\n                          placeholder=\"Enter 6-digit code\"\n                          required\n                          maxLength={6}\n                          pattern=\"[0-9]{6}\"\n                        />\n                      </div>\n                      \n                      <div className=\"twofa-buttons\">\n                        <button\n                          type=\"button\"\n                          className=\"btn btn-outline\"\n                          onClick={() => setShowTwoFactorSetup(false)}\n                        >\n                          Cancel\n                        </button>\n                        <button\n                          type=\"submit\"\n                          className=\"btn btn-primary\"\n                          disabled={loading || twoFactorCode.length !== 6}\n                        >\n                          Verify & Enable\n                        </button>\n                      </div>\n                    </form>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"settings-group\">\n                <h3>Active Sessions</h3>\n                \n                <div className=\"sessions-list\">\n                  {sessions.map((session, index) => (\n                    <div key={index} className=\"session-item\">\n                      <div className=\"session-info\">\n                        <div className=\"session-name\">\n                          {session.browser} - {session.os}\n                          {session.current && <span className=\"current-badge\">Current</span>}\n                        </div>\n                        <div className=\"session-date\">\n                          Active since: {formatDate(session.created_at)}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                <button \n                  className=\"btn btn-outline\"\n                  onClick={handleLogoutOtherSessions}\n                  disabled={loading || sessions.length <= 1}\n                >\n                  Log Out Other Sessions\n                </button>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'account' && (\n            <div className=\"settings-section\">\n              <h2>Account Settings</h2>\n              <p className=\"section-description\">\n                Manage your account preferences and data.\n              </p>\n              \n              <div className=\"settings-group\">\n                <h3>Data Export</h3>\n                <p className=\"setting-description\">\n                  Export all your data including device history, pet profiles, and account information.\n                </p>\n                <button className=\"btn btn-outline\">\n                  Export My Data\n                </button>\n              </div>\n              \n              <div className=\"settings-group danger-zone\">\n                <h3>Danger Zone</h3>\n                <p className=\"setting-description danger-text\">\n                  Permanently delete your account and all associated data. This action cannot be undone.\n                </p>\n                \n                {!showDeleteConfirm ? (\n                  <button \n                    className=\"btn btn-danger\"\n                    onClick={() => setShowDeleteConfirm(true)}\n                  >\n                    Delete Account\n                  </button>\n                ) : (\n                  <div className=\"delete-confirm\">\n                    <p className=\"confirm-text\">\n                      Are you absolutely sure? This will permanently delete your account, \n                      all your devices, pets, and feeding history.\n                    </p>\n                    <div className=\"confirm-buttons\">\n                      <button \n                        className=\"btn btn-outline\"\n                        onClick={() => setShowDeleteConfirm(false)}\n                      >\n                        Cancel\n                      </button>\n                      <button \n                        className=\"btn btn-danger\"\n                        onClick={handleDeleteAccount}\n                        disabled={loading}\n                      >\n                        Yes, Delete My Account\n                      </button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Settings;"],"names":["Settings","loading","setLoading","useState","error","setError","success","setSuccess","userProfile","setUserProfile","notificationPrefs","setNotificationPrefs","activeTab","setActiveTab","currentPassword","setCurrentPassword","newPassword","setNewPassword","confirmPassword","setConfirmPassword","twoFactorEnabled","setTwoFactorEnabled","showTwoFactorSetup","setShowTwoFactorSetup","twoFactorQRCode","setTwoFactorQRCode","twoFactorSecret","setTwoFactorSecret","twoFactorCode","setTwoFactorCode","sessions","setSessions","showDeleteConfirm","setShowDeleteConfirm","navigate","useNavigate","useEffect","fetchUserProfile","fetchNotificationPreferences","fetchSessions","async","data","user","supabase","auth","getUser","Error","from","select","eq","id","single","two_factor_enabled","err","console","message","_navigator$userAgent$","session","getSession","access_token","created_at","browser","navigator","userAgent","match","os","platform","current","updateNotificationPreference","key","value","update","prev","_jsxs","className","children","_jsx","onClick","type","checked","email_notifications","onChange","push_notifications","low_food_alert","feeding_complete_alert","schedule_reminder","onSubmit","e","preventDefault","updateUser","password","htmlFor","target","required","disabled","src","alt","placeholder","maxLength","pattern","length","map","index","dateString","Date","toLocaleString","devicesError","delete","petsError","schedulesError","notifError","profileError","admin","deleteUser","signOut","replace"],"sourceRoot":""}
{"version":3,"file":"static/js/588.cbd38b70.chunk.js","mappings":"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","sources":["pages/Schedule.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { Schedule } from '../types';\n\nconst SchedulePage: React.FC = () => {\n  const [schedules, setSchedules] = useState<Schedule[]>([]);\n  const [newSchedule, setNewSchedule] = useState({ time: '', amount: 0, device_id: '' });\n  const [showForm, setShowForm] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchSchedules = async () => {\n      try {\n        // Get the current user using the new Supabase API\n        const { data: { user }, error: userError } = await supabase.auth.getUser();\n        \n        if (userError) {\n          throw userError;\n        }\n        \n        if (!user) {\n          setLoading(false);\n          setError('You need to be logged in to view schedules');\n          return;\n        }\n        \n        const { data, error: scheduleError } = await supabase\n          .from('schedules')\n          .select('*')\n          .eq('user_id', user.id);\n\n        if (scheduleError) {\n          throw scheduleError;\n        } else {\n          setSchedules(data || []);\n        }\n      } catch (err: any) {\n        console.error('Error fetching schedules:', err);\n        setError(err.message || 'Failed to load schedules');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchSchedules();\n  }, []);\n\n  const handleAddSchedule = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      // Get the current user using the new Supabase API\n      const { data: { user }, error: userError } = await supabase.auth.getUser();\n      \n      if (userError) {\n        throw userError;\n      }\n      \n      if (!user) {\n        setError('You need to be logged in to create schedules');\n        return;\n      }\n      \n      const { data, error: insertError } = await supabase\n        .from('schedules')\n        .insert([{ ...newSchedule, user_id: user.id }])\n        .select();\n\n      if (insertError) {\n        throw insertError;\n      } else {\n        if (data && data.length > 0) {\n          setSchedules([...schedules, data[0]]);\n          setShowForm(false);\n          setNewSchedule({ time: '', amount: 0, device_id: '' });\n        }\n      }\n    } catch (err: any) {\n      console.error('Error adding schedule:', err);\n      setError(err.message || 'Failed to create schedule');\n    }\n  };\n\n  return (\n    <div className=\"schedule-page\">\n      <h1>Feeding Schedules</h1>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <p>{error}</p>\n          <button onClick={() => setError(null)}>Ã—</button>\n        </div>\n      )}\n      \n      {loading ? (\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Loading schedules...</p>\n        </div>\n      ) : (\n        <>\n          <button className=\"btn btn-primary\" onClick={() => setShowForm(true)}>\n            Add Schedule\n          </button>\n          \n          {schedules.length > 0 ? (\n            <ul className=\"schedule-list\">\n              {schedules.map(schedule => (\n                <li key={schedule.schedule_id} className=\"schedule-item\">\n                  <div className=\"schedule-info\">\n                    <p>Time: {new Date(schedule.time).toLocaleString()}</p>\n                    <p>Amount: {schedule.amount}g</p>\n                    <p>Device ID: {schedule.device_id}</p>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          ) : (\n            <div className=\"empty-state\">\n              <p>No schedules found. Add your first feeding schedule!</p>\n            </div>\n          )}\n        </>\n      )}\n\n      {showForm && (\n        <div className=\"modal\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Add Schedule</h2>\n            </div>\n            <form onSubmit={handleAddSchedule}>\n              <div className=\"modal-body\">\n                <label>\n                  Time:\n                  <input\n                    type=\"datetime-local\"\n                    value={newSchedule.time}\n                    onChange={e => setNewSchedule({ ...newSchedule, time: e.target.value })}\n                    required\n                  />\n                </label>\n                <label>\n                  Amount (grams):\n                  <input\n                    type=\"number\"\n                    value={newSchedule.amount}\n                    onChange={e => setNewSchedule({ ...newSchedule, amount: parseInt(e.target.value) })}\n                    min=\"1\"\n                    required\n                  />\n                </label>\n                <label>\n                  Device ID:\n                  <input\n                    type=\"text\"\n                    value={newSchedule.device_id}\n                    onChange={e => setNewSchedule({ ...newSchedule, device_id: e.target.value })}\n                    required\n                  />\n                </label>\n              </div>\n              <div className=\"modal-footer\">\n                <button \n                  type=\"button\" \n                  className=\"btn btn-outline\" \n                  onClick={() => setShowForm(false)}\n                >\n                  Cancel\n                </button>\n                <button className=\"btn btn-primary\" type=\"submit\">\n                  Add Schedule\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SchedulePage;"],"names":["SchedulePage","schedules","setSchedules","useState","newSchedule","setNewSchedule","time","amount","device_id","showForm","setShowForm","loading","setLoading","error","setError","useEffect","async","data","user","userError","supabase","auth","getUser","scheduleError","from","select","eq","id","err","console","message","fetchSchedules","_jsxs","className","children","_jsx","onClick","_Fragment","length","map","schedule","Date","toLocaleString","schedule_id","onSubmit","e","preventDefault","insertError","insert","user_id","type","value","onChange","target","required","parseInt","min"],"sourceRoot":""}
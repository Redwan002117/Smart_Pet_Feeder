{"ast":null,"code":"// Email validation\nexport const isValidEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation (at least 8 characters, including number/special char)\nexport const isValidPassword = password => {\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d|\\W).{8,}$/;\n  return passwordRegex.test(password);\n};\n\n// Username validation (alphanumeric, underscore, hyphen, 3-20 chars)\nexport const isValidUsername = username => {\n  const usernameRegex = /^[a-zA-Z0-9_-]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\n// Device name validation (2-30 chars)\nexport const isValidDeviceName = name => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Pet name validation (2-30 chars)\nexport const isValidPetName = name => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Time validation (HH:MM format)\nexport const isValidTime = time => {\n  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  return timeRegex.test(time);\n};\n\n// Date validation (YYYY-MM-DD format)\nexport const isValidDate = date => {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) return false;\n  const d = new Date(date);\n  return d instanceof Date && !isNaN(d.getTime());\n};\n\n// Field required validation\nexport const isRequired = value => {\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  return value !== undefined && value !== null;\n};\n\n// Numeric value validation\nexport const isNumeric = value => {\n  return !isNaN(Number(value));\n};\n\n// Range validation\nexport const isInRange = (value, min, max) => {\n  return value >= min && value <= max;\n};\n\n// WiFi SSID validation\nexport const isValidSSID = ssid => {\n  return ssid.trim().length >= 1 && ssid.trim().length <= 32;\n};\n\n// WiFi password validation\nexport const isValidWiFiPassword = password => {\n  return password.length >= 8;\n};\n\n// Validate form fields\n\nexport const validateForm = (fields, validations) => {\n  const errors = {};\n  let isValid = true;\n  Object.keys(validations).forEach(fieldName => {\n    const value = fields[fieldName];\n    const [valid, errorMessage] = validations[fieldName](value);\n    if (!valid) {\n      errors[fieldName] = errorMessage;\n      isValid = false;\n    }\n  });\n  return {\n    isValid,\n    errors\n  };\n};","map":{"version":3,"names":["isValidEmail","email","emailRegex","test","isValidPassword","password","passwordRegex","isValidUsername","username","usernameRegex","isValidDeviceName","name","trim","length","isValidPetName","isValidTime","time","timeRegex","isValidDate","date","dateRegex","d","Date","isNaN","getTime","isRequired","value","undefined","isNumeric","Number","isInRange","min","max","isValidSSID","ssid","isValidWiFiPassword","validateForm","fields","validations","errors","isValid","Object","keys","forEach","fieldName","valid","errorMessage"],"sources":["/workspaces/Smart_Pet_Feeder/src/utils/validation.ts"],"sourcesContent":["// Email validation\nexport const isValidEmail = (email: string): boolean => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\n\n// Password validation (at least 8 characters, including number/special char)\nexport const isValidPassword = (password: string): boolean => {\n  const passwordRegex = /^(?=.*[A-Za-z])(?=.*\\d|\\W).{8,}$/;\n  return passwordRegex.test(password);\n};\n\n// Username validation (alphanumeric, underscore, hyphen, 3-20 chars)\nexport const isValidUsername = (username: string): boolean => {\n  const usernameRegex = /^[a-zA-Z0-9_-]{3,20}$/;\n  return usernameRegex.test(username);\n};\n\n// Device name validation (2-30 chars)\nexport const isValidDeviceName = (name: string): boolean => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Pet name validation (2-30 chars)\nexport const isValidPetName = (name: string): boolean => {\n  return name.trim().length >= 2 && name.trim().length <= 30;\n};\n\n// Time validation (HH:MM format)\nexport const isValidTime = (time: string): boolean => {\n  const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n  return timeRegex.test(time);\n};\n\n// Date validation (YYYY-MM-DD format)\nexport const isValidDate = (date: string): boolean => {\n  const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\n  if (!dateRegex.test(date)) return false;\n\n  const d = new Date(date);\n  return d instanceof Date && !isNaN(d.getTime());\n};\n\n// Field required validation\nexport const isRequired = (value: string | number): boolean => {\n  if (typeof value === 'string') {\n    return value.trim().length > 0;\n  }\n  return value !== undefined && value !== null;\n};\n\n// Numeric value validation\nexport const isNumeric = (value: string): boolean => {\n  return !isNaN(Number(value));\n};\n\n// Range validation\nexport const isInRange = (value: number, min: number, max: number): boolean => {\n  return value >= min && value <= max;\n};\n\n// WiFi SSID validation\nexport const isValidSSID = (ssid: string): boolean => {\n  return ssid.trim().length >= 1 && ssid.trim().length <= 32;\n};\n\n// WiFi password validation\nexport const isValidWiFiPassword = (password: string): boolean => {\n  return password.length >= 8;\n};\n\n// Validate form fields\nexport type ValidationResult = {\n  isValid: boolean;\n  errors: Record<string, string>;\n};\n\nexport const validateForm = (\n  fields: Record<string, any>,\n  validations: Record<string, (value: any) => [boolean, string]>\n): ValidationResult => {\n  const errors: Record<string, string> = {};\n  let isValid = true;\n\n  Object.keys(validations).forEach((fieldName) => {\n    const value = fields[fieldName];\n    const [valid, errorMessage] = validations[fieldName](value);\n    \n    if (!valid) {\n      errors[fieldName] = errorMessage;\n      isValid = false;\n    }\n  });\n\n  return {\n    isValid,\n    errors\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
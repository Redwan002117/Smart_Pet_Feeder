{"version":3,"file":"static/js/503.78286c21.chunk.js","mappings":"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","sources":["pages/Pets.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { Pet } from '../types';\nimport '../styles/Pets.css';\n\nconst Pets: React.FC = () => {\n  const [pets, setPets] = useState<Pet[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [showAddModal, setShowAddModal] = useState<boolean>(false);\n  const [editingPet, setEditingPet] = useState<Pet | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);\n  \n  // Form state\n  const [petName, setPetName] = useState<string>('');\n  const [petWeight, setPetWeight] = useState<number>(0);\n  const [petAge, setPetAge] = useState<number>(0);\n  const [petBreed, setPetBreed] = useState<string>('');\n  const [petActivityLevel, setPetActivityLevel] = useState<'low' | 'medium' | 'high'>('medium');\n  const [petDietary, setPetDietary] = useState<string>('');\n\n  useEffect(() => {\n    fetchPets();\n    \n    // Set up realtime subscription\n    const subscription = supabase\n      .channel('pets-changes')\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'pets' },\n        handlePetUpdate\n      )\n      .subscribe();\n      \n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  // Fetch user's pets\n  const fetchPets = async () => {\n    try {\n      setLoading(true);\n      \n      // Get current user\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      // Fetch pets\n      const { data, error } = await supabase\n        .from('pets')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('name');\n        \n      if (error) throw error;\n      \n      setPets(data || []);\n    } catch (err: any) {\n      console.error('Error fetching pets:', err);\n      setError(err.message || 'Failed to load pets');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle realtime pet updates\n  const handlePetUpdate = (payload: any) => {\n    const { eventType, new: newPet, old: oldPet } = payload;\n    \n    if (eventType === 'INSERT') {\n      setPets(prev => [...prev, newPet].sort((a, b) => a.name.localeCompare(b.name)));\n    } else if (eventType === 'UPDATE') {\n      setPets(prev => \n        prev.map(pet => \n          pet.pet_id === newPet.pet_id ? newPet : pet\n        )\n      );\n    } else if (eventType === 'DELETE') {\n      setPets(prev => \n        prev.filter(pet => pet.pet_id !== oldPet.pet_id)\n      );\n    }\n  };\n\n  // Reset form fields\n  const resetForm = () => {\n    setPetName('');\n    setPetWeight(0);\n    setPetAge(0);\n    setPetBreed('');\n    setPetActivityLevel('medium');\n    setPetDietary('');\n  };\n\n  // Open edit modal with pet data\n  const handleEditClick = (pet: Pet) => {\n    setEditingPet(pet);\n    setPetName(pet.name);\n    setPetWeight(pet.health_data.weight);\n    setPetAge(pet.health_data.age);\n    setPetBreed(pet.health_data.breed || '');\n    setPetActivityLevel(pet.health_data.activity_level || 'medium');\n    setPetDietary((pet.health_data.dietary_restrictions || []).join(', '));\n    setShowAddModal(true);\n  };\n\n  // Submit the form (create or update pet)\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    try {\n      // Get current user\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      // Validate form\n      if (!petName.trim()) {\n        setError('Pet name is required');\n        return;\n      }\n      \n      // Parse dietary restrictions into array\n      const dietaryRestrictions = petDietary\n        .split(',')\n        .map(item => item.trim())\n        .filter(item => item.length > 0);\n      \n      // Create health data object\n      const healthData = {\n        weight: petWeight,\n        age: petAge,\n        breed: petBreed.trim(),\n        activity_level: petActivityLevel,\n        dietary_restrictions: dietaryRestrictions\n      };\n      \n      if (editingPet) {\n        // Update existing pet\n        const { error } = await supabase\n          .from('pets')\n          .update({\n            name: petName.trim(),\n            health_data: healthData\n          })\n          .eq('pet_id', editingPet.pet_id);\n          \n        if (error) throw error;\n      } else {\n        // Create new pet\n        const { error } = await supabase\n          .from('pets')\n          .insert([{\n            user_id: user.id,\n            name: petName.trim(),\n            health_data: healthData\n          }]);\n          \n        if (error) throw error;\n      }\n      \n      // Close modal and reset form\n      setShowAddModal(false);\n      resetForm();\n      setEditingPet(null);\n      \n    } catch (err: any) {\n      console.error('Error saving pet:', err);\n      setError(err.message || 'Failed to save pet');\n    }\n  };\n\n  // Delete a pet\n  const handleDelete = async (petId: string) => {\n    try {\n      const { error } = await supabase\n        .from('pets')\n        .delete()\n        .eq('pet_id', petId);\n        \n      if (error) throw error;\n      \n      setDeleteConfirm(null);\n    } catch (err: any) {\n      console.error('Error deleting pet:', err);\n      setError(`Failed to delete pet: ${err.message}`);\n    }\n  };\n\n  // Calculate recommended food amount based on pet data\n  const calculateFoodRecommendation = (pet: Pet): string => {\n    // This is a simplified calculation - in a real app, this would be more sophisticated\n    const { weight, age, activity_level } = pet.health_data;\n    \n    // Base amount in grams\n    let baseAmount = weight * 20;\n    \n    // Adjust for age\n    if (age < 1) {\n      baseAmount *= 1.2; // Puppies/kittens need more food\n    } else if (age > 7) {\n      baseAmount *= 0.8; // Senior pets often need less food\n    }\n    \n    // Adjust for activity level\n    switch (activity_level) {\n      case 'low':\n        baseAmount *= 0.8;\n        break;\n      case 'high':\n        baseAmount *= 1.2;\n        break;\n      default:\n        // Medium is baseline\n        break;\n    }\n    \n    // Round to nearest 5g\n    const roundedAmount = Math.round(baseAmount / 5) * 5;\n    \n    // Daily recommendation\n    return `${roundedAmount}g per day`;\n  };\n\n  // Calculate how to divide food throughout the day\n  const getFeedingSchedule = (pet: Pet): string => {\n    const { age } = pet.health_data;\n    \n    if (age < 1) {\n      return \"3-4 times per day\";\n    } else if (age < 7) {\n      return \"2 times per day\";\n    } else {\n      return \"2-3 smaller meals per day\";\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading pet profiles...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"pets-container\">\n      <div className=\"pets-header\">\n        <h1>My Pets</h1>\n        <button \n          className=\"btn btn-primary\" \n          onClick={() => {\n            resetForm();\n            setEditingPet(null);\n            setShowAddModal(true);\n          }}\n        >\n          <i className=\"icon-plus\"></i> Add Pet\n        </button>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {pets.length === 0 ? (\n        <div className=\"no-pets\">\n          <div className=\"no-pets-icon\">\n            <i className=\"icon-paw\"></i>\n          </div>\n          <h2>No pets added yet</h2>\n          <p>Add your pets to track their feeding schedules and health data.</p>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => {\n              resetForm();\n              setShowAddModal(true);\n            }}\n          >\n            Add Your First Pet\n          </button>\n        </div>\n      ) : (\n        <div className=\"pets-grid\">\n          {pets.map((pet) => (\n            <div key={pet.pet_id} className=\"pet-card\">\n              <div className=\"pet-card-header\">\n                <h3>{pet.name}</h3>\n                <div className=\"pet-actions\">\n                  <button \n                    className=\"btn btn-icon\" \n                    onClick={() => handleEditClick(pet)}\n                    title=\"Edit Pet\"\n                  >\n                    <i className=\"icon-edit\"></i>\n                  </button>\n                  <button \n                    className=\"btn btn-icon btn-danger\" \n                    onClick={() => setDeleteConfirm(pet.pet_id)}\n                    title=\"Delete Pet\"\n                  >\n                    <i className=\"icon-trash\"></i>\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"pet-info\">\n                <div className=\"pet-detail\">\n                  <span className=\"detail-label\">Weight:</span>\n                  <span className=\"detail-value\">{pet.health_data.weight} kg</span>\n                </div>\n                <div className=\"pet-detail\">\n                  <span className=\"detail-label\">Age:</span>\n                  <span className=\"detail-value\">{pet.health_data.age} {pet.health_data.age === 1 ? 'year' : 'years'}</span>\n                </div>\n                {pet.health_data.breed && (\n                  <div className=\"pet-detail\">\n                    <span className=\"detail-label\">Breed:</span>\n                    <span className=\"detail-value\">{pet.health_data.breed}</span>\n                  </div>\n                )}\n                <div className=\"pet-detail\">\n                  <span className=\"detail-label\">Activity Level:</span>\n                  <span className=\"detail-value pet-activity\">\n                    {pet.health_data.activity_level || 'Medium'}\n                  </span>\n                </div>\n                {pet.health_data.dietary_restrictions && pet.health_data.dietary_restrictions.length > 0 && (\n                  <div className=\"pet-detail\">\n                    <span className=\"detail-label\">Dietary Restrictions:</span>\n                    <div className=\"dietary-tags\">\n                      {pet.health_data.dietary_restrictions.map((item, index) => (\n                        <span key={index} className=\"dietary-tag\">{item}</span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n              \n              <div className=\"pet-recommendations\">\n                <h4>Feeding Recommendations</h4>\n                <div className=\"recommendation-item\">\n                  <i className=\"icon-bowl\"></i>\n                  <div className=\"recommendation-content\">\n                    <span className=\"recommendation-label\">Daily Amount</span>\n                    <span className=\"recommendation-value\">{calculateFoodRecommendation(pet)}</span>\n                  </div>\n                </div>\n                <div className=\"recommendation-item\">\n                  <i className=\"icon-clock\"></i>\n                  <div className=\"recommendation-content\">\n                    <span className=\"recommendation-label\">Schedule</span>\n                    <span className=\"recommendation-value\">{getFeedingSchedule(pet)}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n      \n      {/* Add/Edit Pet Modal */}\n      {showAddModal && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>{editingPet ? `Edit ${editingPet.name}` : 'Add New Pet'}</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setShowAddModal(false)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <form onSubmit={handleSubmit}>\n              <div className=\"modal-body\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"pet-name\">Name</label>\n                  <input\n                    id=\"pet-name\"\n                    type=\"text\"\n                    value={petName}\n                    onChange={(e) => setPetName(e.target.value)}\n                    placeholder=\"Pet name\"\n                    required\n                  />\n                </div>\n                \n                <div className=\"form-row\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"pet-weight\">Weight (kg)</label>\n                    <input\n                      id=\"pet-weight\"\n                      type=\"number\"\n                      min=\"0.1\"\n                      step=\"0.1\"\n                      value={petWeight}\n                      onChange={(e) => setPetWeight(parseFloat(e.target.value) || 0)}\n                      placeholder=\"Weight\"\n                    />\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"pet-age\">Age (years)</label>\n                    <input\n                      id=\"pet-age\"\n                      type=\"number\"\n                      min=\"0.1\"\n                      step=\"0.1\"\n                      value={petAge}\n                      onChange={(e) => setPetAge(parseFloat(e.target.value) || 0)}\n                      placeholder=\"Age\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"pet-breed\">Breed (optional)</label>\n                  <input\n                    id=\"pet-breed\"\n                    type=\"text\"\n                    value={petBreed}\n                    onChange={(e) => setPetBreed(e.target.value)}\n                    placeholder=\"Breed\"\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"pet-activity\">Activity Level</label>\n                  <select\n                    id=\"pet-activity\"\n                    value={petActivityLevel}\n                    onChange={(e) => setPetActivityLevel(e.target.value as 'low' | 'medium' | 'high')}\n                  >\n                    <option value=\"low\">Low</option>\n                    <option value=\"medium\">Medium</option>\n                    <option value=\"high\">High</option>\n                  </select>\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"pet-dietary\">Dietary Restrictions (comma-separated, optional)</label>\n                  <input\n                    id=\"pet-dietary\"\n                    type=\"text\"\n                    value={petDietary}\n                    onChange={(e) => setPetDietary(e.target.value)}\n                    placeholder=\"e.g., grain-free, low-fat\"\n                  />\n                  <small className=\"form-note\">Separate multiple restrictions with commas</small>\n                </div>\n              </div>\n              \n              <div className=\"modal-footer\">\n                <button \n                  type=\"button\" \n                  className=\"btn btn-outline\" \n                  onClick={() => setShowAddModal(false)}\n                >\n                  Cancel\n                </button>\n                <button \n                  type=\"submit\" \n                  className=\"btn btn-primary\"\n                >\n                  {editingPet ? 'Save Changes' : 'Add Pet'}\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n      \n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Delete Pet</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <div className=\"modal-body\">\n              <p className=\"confirm-message\">\n                Are you sure you want to delete this pet? This action cannot be undone.\n              </p>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button \n                className=\"btn btn-outline\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                Cancel\n              </button>\n              <button \n                className=\"btn btn-danger\" \n                onClick={() => handleDelete(deleteConfirm)}\n              >\n                Delete Pet\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Pets;\n"],"names":["Pets","pets","setPets","useState","loading","setLoading","error","setError","showAddModal","setShowAddModal","editingPet","setEditingPet","deleteConfirm","setDeleteConfirm","petName","setPetName","petWeight","setPetWeight","petAge","setPetAge","petBreed","setPetBreed","petActivityLevel","setPetActivityLevel","petDietary","setPetDietary","useEffect","fetchPets","subscription","supabase","channel","on","event","schema","table","handlePetUpdate","subscribe","unsubscribe","async","data","user","auth","getUser","Error","from","select","eq","id","order","err","console","message","payload","eventType","new","newPet","old","oldPet","prev","sort","a","b","name","localeCompare","map","pet","pet_id","filter","resetForm","calculateFoodRecommendation","weight","age","activity_level","health_data","baseAmount","Math","round","getFeedingSchedule","_jsxs","className","children","_jsx","onClick","length","breed","dietary_restrictions","join","handleEditClick","title","item","index","onSubmit","e","preventDefault","trim","dietaryRestrictions","split","healthData","update","insert","user_id","htmlFor","type","value","onChange","target","placeholder","required","min","step","parseFloat","delete","petId","handleDelete"],"sourceRoot":""}
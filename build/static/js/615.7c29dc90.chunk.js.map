{"version":3,"file":"static/js/615.7c29dc90.chunk.js","mappings":"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","sources":["pages/Devices.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\nimport { Device } from '../types';\nimport '../styles/Devices.css';\n\nconst Devices: React.FC = () => {\n  const [devices, setDevices] = useState<Device[]>([]);\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  const [deleteConfirm, setDeleteConfirm] = useState<string | null>(null);\n  const [editingDevice, setEditingDevice] = useState<Device | null>(null);\n  const [editName, setEditName] = useState<string>('');\n\n  useEffect(() => {\n    fetchDevices();\n\n    // Set up realtime subscription for devices\n    const subscription = supabase\n      .channel('devices-changes')\n      .on('postgres_changes', \n        { event: '*', schema: 'public', table: 'devices' },\n        handleDeviceUpdate\n      )\n      .subscribe();\n    \n    return () => {\n      subscription.unsubscribe();\n    };\n  }, []);\n\n  const fetchDevices = async () => {\n    try {\n      setLoading(true);\n      \n      // Get current user\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      // Fetch user's devices\n      const { data, error } = await supabase\n        .from('devices')\n        .select('*')\n        .eq('user_id', user.id)\n        .order('created_at', { ascending: false });\n        \n      if (error) throw error;\n      \n      setDevices(data || []);\n    } catch (err: any) {\n      console.error('Error fetching devices:', err);\n      setError(err.message || 'Failed to load devices');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handle realtime device updates\n  const handleDeviceUpdate = (payload: any) => {\n    const { eventType, new: newDevice, old: oldDevice } = payload;\n    \n    if (eventType === 'INSERT') {\n      setDevices(prev => [newDevice, ...prev]);\n    } else if (eventType === 'UPDATE') {\n      setDevices(prev => \n        prev.map(device => \n          device.device_id === newDevice.device_id ? newDevice : device\n        )\n      );\n    } else if (eventType === 'DELETE') {\n      setDevices(prev => \n        prev.filter(device => device.device_id !== oldDevice.device_id)\n      );\n    }\n  };\n\n  // Delete a device\n  const handleDelete = async (deviceId: string) => {\n    try {\n      const { error } = await supabase\n        .from('devices')\n        .delete()\n        .eq('device_id', deviceId);\n        \n      if (error) throw error;\n      \n      setDeleteConfirm(null);\n    } catch (err: any) {\n      console.error('Error deleting device:', err);\n      setError(`Failed to delete device: ${err.message}`);\n    }\n  };\n\n  // Update device name\n  const handleUpdateName = async () => {\n    if (!editingDevice) return;\n    \n    try {\n      const { error } = await supabase\n        .from('devices')\n        .update({ device_name: editName })\n        .eq('device_id', editingDevice.device_id);\n        \n      if (error) throw error;\n      \n      // Close the edit dialog\n      setEditingDevice(null);\n    } catch (err: any) {\n      console.error('Error updating device name:', err);\n      setError(`Failed to update device name: ${err.message}`);\n    }\n  };\n\n  // Dispense food manually\n  const handleDispense = async (device: Device, amount: number = 10) => {\n    try {\n      // Update device status with dispense command\n      const { error } = await supabase\n        .from('devices')\n        .update({\n          last_status: {\n            ...device.last_status,\n            command: 'dispense',\n            command_amount: amount\n          }\n        })\n        .eq('device_id', device.device_id);\n        \n      if (error) throw error;\n      \n      // Record the feeding in history\n      const { error: historyError } = await supabase\n        .from('feeding_history')\n        .insert([{\n          device_id: device.device_id,\n          time: new Date().toISOString(),\n          amount: amount,\n          manual: true\n        }]);\n        \n      if (historyError) throw historyError;\n      \n      alert(`Dispensing ${amount}g of food from ${device.device_name}!`);\n    } catch (err: any) {\n      console.error('Error dispensing food:', err);\n      setError(`Failed to dispense food: ${err.message}`);\n    }\n  };\n\n  // Format date for display\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  // Render device status badge\n  const renderStatusBadge = (device: Device) => {\n    const foodLevel = device.last_status?.food_level || 0;\n    const lastUpdate = device.last_status?.last_update;\n    \n    // Check if device has updated status in the last 5 minutes\n    const isActive = lastUpdate && \n      (Date.now() / 1000 - parseInt(lastUpdate)) < 300; // 5 minutes\n    \n    if (!isActive) {\n      return <span className=\"status-badge offline\">Offline</span>;\n    }\n    \n    if (foodLevel < 20) {\n      return <span className=\"status-badge warning\">Low Food</span>;\n    }\n    \n    return <span className=\"status-badge online\">Online</span>;\n  };\n\n  // Render WiFi strength icon\n  const renderWifiStrength = (strength: number = 0) => {\n    let bars = 0;\n    \n    if (strength < -80) bars = 1;\n    else if (strength < -70) bars = 2;\n    else if (strength < -60) bars = 3;\n    else bars = 4;\n    \n    return (\n      <div className=\"wifi-strength-icon\">\n        {Array.from({ length: 4 }).map((_, i) => (\n          <div \n            key={i}\n            className={`wifi-bar ${i < bars ? 'active' : ''}`}\n          ></div>\n        ))}\n      </div>\n    );\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading devices...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"devices-container\">\n      <div className=\"devices-header\">\n        <h1>My Devices</h1>\n        <Link to=\"/device-setup\" className=\"btn btn-primary\">\n          <i className=\"icon-plus\"></i> Add Device\n        </Link>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {devices.length === 0 ? (\n        <div className=\"no-devices\">\n          <div className=\"no-devices-icon\">\n            <i className=\"icon-device-off\"></i>\n          </div>\n          <h2>No devices found</h2>\n          <p>Get started by adding your first Pet Feeder device.</p>\n          <Link to=\"/device-setup\" className=\"btn btn-primary\">\n            Set Up New Device\n          </Link>\n        </div>\n      ) : (\n        <div className=\"devices-grid\">\n          {devices.map((device) => {\n            const foodLevel = device.last_status?.food_level || 0;\n            const wifiStrength = device.last_status?.wifi_strength || 0;\n            const lastUpdate = device.last_status?.last_update \n              ? new Date(parseInt(device.last_status.last_update) * 1000).toLocaleString()\n              : 'Never';\n            \n            return (\n              <div key={device.device_id} className=\"device-card\">\n                <div className=\"device-card-header\">\n                  <h3>{device.device_name}</h3>\n                  {renderStatusBadge(device)}\n                </div>\n                \n                <div className=\"device-card-content\">\n                  <div className=\"device-metric\">\n                    <div className=\"metric-label\">Food Level</div>\n                    <div className=\"progress-bar\">\n                      <div \n                        className=\"progress-fill\" \n                        style={{ width: `${foodLevel}%` }}\n                      ></div>\n                      <span className=\"progress-text\">{foodLevel}%</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"device-metric\">\n                    <div className=\"metric-label\">WiFi Signal</div>\n                    <div className=\"wifi-container\">\n                      {renderWifiStrength(wifiStrength)}\n                      <span className=\"wifi-text\">{wifiStrength} dBm</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"device-metric\">\n                    <div className=\"metric-label\">Last Update</div>\n                    <div className=\"metric-value\">{lastUpdate}</div>\n                  </div>\n                  \n                  <div className=\"device-metric\">\n                    <div className=\"metric-label\">Added On</div>\n                    <div className=\"metric-value\">{formatDate(device.created_at)}</div>\n                  </div>\n                </div>\n                \n                <div className=\"device-card-actions\">\n                  <button \n                    className=\"btn btn-icon\" \n                    onClick={() => {\n                      setEditingDevice(device);\n                      setEditName(device.device_name);\n                    }}\n                    title=\"Edit Device\"\n                  >\n                    <i className=\"icon-edit\"></i>\n                  </button>\n                  \n                  <button \n                    className=\"btn btn-icon btn-warning\" \n                    onClick={() => handleDispense(device)}\n                    title=\"Dispense Food\"\n                  >\n                    <i className=\"icon-food\"></i>\n                  </button>\n                  \n                  <button \n                    className=\"btn btn-icon btn-danger\" \n                    onClick={() => setDeleteConfirm(device.device_id)}\n                    title=\"Delete Device\"\n                  >\n                    <i className=\"icon-trash\"></i>\n                  </button>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n      \n      {/* Edit Device Modal */}\n      {editingDevice && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Edit Device</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setEditingDevice(null)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <div className=\"modal-body\">\n              <div className=\"form-group\">\n                <label htmlFor=\"device-name\">Device Name</label>\n                <input\n                  id=\"device-name\"\n                  type=\"text\"\n                  value={editName}\n                  onChange={(e) => setEditName(e.target.value)}\n                  placeholder=\"Enter device name\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button \n                className=\"btn btn-outline\" \n                onClick={() => setEditingDevice(null)}\n              >\n                Cancel\n              </button>\n              <button \n                className=\"btn btn-primary\" \n                onClick={handleUpdateName}\n              >\n                Save Changes\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Delete Confirmation Modal */}\n      {deleteConfirm && (\n        <div className=\"modal-overlay\">\n          <div className=\"modal-content\">\n            <div className=\"modal-header\">\n              <h2>Confirm Deletion</h2>\n              <button \n                className=\"modal-close\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                &times;\n              </button>\n            </div>\n            \n            <div className=\"modal-body\">\n              <p className=\"confirm-message\">\n                Are you sure you want to delete this device? This action cannot be undone.\n              </p>\n            </div>\n            \n            <div className=\"modal-footer\">\n              <button \n                className=\"btn btn-outline\" \n                onClick={() => setDeleteConfirm(null)}\n              >\n                Cancel\n              </button>\n              <button \n                className=\"btn btn-danger\" \n                onClick={() => handleDelete(deleteConfirm)}\n              >\n                Delete Device\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Devices;"],"names":["Devices","devices","setDevices","useState","loading","setLoading","error","setError","deleteConfirm","setDeleteConfirm","editingDevice","setEditingDevice","editName","setEditName","useEffect","fetchDevices","subscription","supabase","channel","on","event","schema","table","handleDeviceUpdate","subscribe","unsubscribe","async","data","user","auth","getUser","Error","from","select","eq","id","order","ascending","err","console","message","payload","eventType","new","newDevice","old","oldDevice","prev","map","device","device_id","filter","renderStatusBadge","_device$last_status","_device$last_status2","foodLevel","last_status","food_level","lastUpdate","last_update","Date","now","parseInt","_jsx","className","children","renderWifiStrength","strength","arguments","length","undefined","bars","Array","_","i","_jsxs","Link","to","onClick","_device$last_status3","_device$last_status4","_device$last_status5","wifiStrength","wifi_strength","toLocaleString","device_name","style","width","dateString","created_at","toLocaleDateString","title","amount","update","command","command_amount","historyError","insert","time","toISOString","manual","alert","handleDispense","htmlFor","type","value","onChange","e","target","placeholder","delete","deviceId","handleDelete"],"sourceRoot":""}
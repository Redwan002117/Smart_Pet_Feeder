{"version":3,"file":"static/js/310.5046be36.chunk.js","mappings":"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","sources":["pages/AdminDashboard.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport { Line, Doughnut, Bar } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  ArcElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n} from 'chart.js';\nimport '../styles/AdminDashboard.css';\n\n// Register Chart.js components\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  ArcElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst AdminDashboard: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Statistics\n  const [userCount, setUserCount] = useState<number>(0);\n  const [verifiedUserCount, setVerifiedUserCount] = useState<number>(0);\n  const [deviceCount, setDeviceCount] = useState<number>(0);\n  const [petCount, setPetCount] = useState<number>(0);\n  const [feedingCount, setFeedingCount] = useState<number>(0);\n  \n  // Charts data\n  const [userGrowthData, setUserGrowthData] = useState<any>(null);\n  const [deviceStatusData, setDeviceStatusData] = useState<any>(null);\n  const [feedingHistoryData, setFeedingHistoryData] = useState<any>(null);\n  const [deviceDistributionData, setDeviceDistributionData] = useState<any>(null);\n\n  useEffect(() => {\n    fetchAdminData();\n  }, []);\n\n  const fetchAdminData = async () => {\n    try {\n      setLoading(true);\n      \n      // Check admin access\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { data: profile } = await supabase\n        .from('profiles')\n        .select('role')\n        .eq('id', user.id)\n        .single();\n        \n      if (!profile || profile.role !== 'admin') {\n        throw new Error('You do not have admin access');\n      }\n      \n      // Fetch statistics\n      const { count: usersCount, error: usersError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true });\n        \n      if (usersError) throw usersError;\n      \n      // Simplified verification count (in a real app, you would check email verification status)\n      const { count: verifiedCount, error: verifiedError } = await supabase\n        .from('profiles')\n        .select('*', { count: 'exact', head: true })\n        .not('email', 'eq', '');\n        \n      if (verifiedError) throw verifiedError;\n      \n      const { count: devicesCount, error: devicesError } = await supabase\n        .from('devices')\n        .select('*', { count: 'exact', head: true });\n        \n      if (devicesError) throw devicesError;\n      \n      const { count: petsCount, error: petsError } = await supabase\n        .from('pets')\n        .select('*', { count: 'exact', head: true });\n        \n      if (petsError) throw petsError;\n      \n      const { count: feedingsCount, error: feedingsError } = await supabase\n        .from('feeding_history')\n        .select('*', { count: 'exact', head: true });\n        \n      if (feedingsError) throw feedingsError;\n      \n      // Set statistics\n      setUserCount(usersCount || 0);\n      setVerifiedUserCount(verifiedCount || 0);\n      setDeviceCount(devicesCount || 0);\n      setPetCount(petsCount || 0);\n      setFeedingCount(feedingsCount || 0);\n      \n      // Generate chart data\n      generateUserGrowthChart();\n      generateDeviceStatusChart();\n      generateFeedingHistoryChart();\n      generateDeviceDistributionChart();\n    } catch (err: any) {\n      console.error('Error fetching admin data:', err);\n      setError(err.message || 'Failed to load admin dashboard');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Generate user growth chart data (simulated)\n  const generateUserGrowthChart = () => {\n    // In a real app, you'd fetch actual data by date from the database\n    const labels = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul'];\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'New Users',\n          data: [5, 8, 12, 15, 20, 25, 30],\n          borderColor: 'rgba(54, 162, 235, 1)',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          tension: 0.3\n        }\n      ]\n    };\n    \n    setUserGrowthData(data);\n  };\n\n  // Generate device status chart data (simulated)\n  const generateDeviceStatusChart = () => {\n    const data = {\n      labels: ['Online', 'Offline', 'Low Food'],\n      datasets: [\n        {\n          data: [deviceCount * 0.7, deviceCount * 0.2, deviceCount * 0.1],\n          backgroundColor: [\n            'rgba(75, 192, 192, 0.7)',\n            'rgba(255, 99, 132, 0.7)',\n            'rgba(255, 205, 86, 0.7)'\n          ],\n          borderColor: [\n            'rgba(75, 192, 192, 1)',\n            'rgba(255, 99, 132, 1)',\n            'rgba(255, 205, 86, 1)'\n          ],\n          borderWidth: 1\n        }\n      ]\n    };\n    \n    setDeviceStatusData(data);\n  };\n\n  // Generate feeding history chart (simulated)\n  const generateFeedingHistoryChart = () => {\n    const labels = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n    const data = {\n      labels,\n      datasets: [\n        {\n          label: 'Scheduled Feedings',\n          data: [15, 18, 14, 20, 16, 12, 10],\n          backgroundColor: 'rgba(54, 162, 235, 0.7)',\n        },\n        {\n          label: 'Manual Feedings',\n          data: [8, 5, 9, 6, 10, 12, 7],\n          backgroundColor: 'rgba(255, 99, 132, 0.7)',\n        }\n      ]\n    };\n    \n    setFeedingHistoryData(data);\n  };\n\n  // Generate device distribution chart (simulated)\n  const generateDeviceDistributionChart = () => {\n    const data = {\n      labels: ['1 Device', '2 Devices', '3+ Devices'],\n      datasets: [\n        {\n          label: 'Users',\n          data: [Math.floor(userCount * 0.6), Math.floor(userCount * 0.3), Math.floor(userCount * 0.1)],\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.7)',\n            'rgba(54, 162, 235, 0.7)',\n            'rgba(75, 192, 192, 0.7)'\n          ],\n          borderColor: [\n            'rgba(255, 99, 132, 1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(75, 192, 192, 1)'\n          ],\n          borderWidth: 1\n        }\n      ]\n    };\n    \n    setDeviceDistributionData(data);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading admin dashboard...</p>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"error-container\">\n        <i className=\"icon-error\"></i>\n        <h2>Error</h2>\n        <p>{error}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"admin-dashboard-container\">\n      <div className=\"admin-header\">\n        <h1>Admin Dashboard</h1>\n        <div className=\"admin-actions\">\n          <button className=\"btn btn-outline\">\n            <i className=\"icon-download\"></i> Export Data\n          </button>\n        </div>\n      </div>\n      \n      <div className=\"stats-grid\">\n        <div className=\"stat-card\">\n          <div className=\"stat-icon user-icon\">\n            <i className=\"icon-users\"></i>\n          </div>\n          <div className=\"stat-content\">\n            <h3>Total Users</h3>\n            <div className=\"stat-value\">{userCount}</div>\n            <div className=\"stat-secondary\">\n              {verifiedUserCount} verified ({Math.round((verifiedUserCount / userCount) * 100)}%)\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"stat-card\">\n          <div className=\"stat-icon device-icon\">\n            <i className=\"icon-device\"></i>\n          </div>\n          <div className=\"stat-content\">\n            <h3>Total Devices</h3>\n            <div className=\"stat-value\">{deviceCount}</div>\n            <div className=\"stat-secondary\">\n              {(deviceCount / userCount).toFixed(1)} avg per user\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"stat-card\">\n          <div className=\"stat-icon pet-icon\">\n            <i className=\"icon-paw\"></i>\n          </div>\n          <div className=\"stat-content\">\n            <h3>Total Pets</h3>\n            <div className=\"stat-value\">{petCount}</div>\n            <div className=\"stat-secondary\">\n              {(petCount / userCount).toFixed(1)} avg per user\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"stat-card\">\n          <div className=\"stat-icon food-icon\">\n            <i className=\"icon-food\"></i>\n          </div>\n          <div className=\"stat-content\">\n            <h3>Total Feedings</h3>\n            <div className=\"stat-value\">{feedingCount}</div>\n            <div className=\"stat-secondary\">\n              {Math.round(feedingCount / 7)} avg per day (week)\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"charts-grid\">\n        <div className=\"chart-card wide\">\n          <h3>User Growth</h3>\n          <div className=\"chart-container\">\n            {userGrowthData && <Line data={userGrowthData} options={{ responsive: true, maintainAspectRatio: false }} />}\n          </div>\n        </div>\n        \n        <div className=\"chart-card\">\n          <h3>Device Status</h3>\n          <div className=\"chart-container\">\n            {deviceStatusData && <Doughnut data={deviceStatusData} options={{ responsive: true, maintainAspectRatio: false }} />}\n          </div>\n        </div>\n        \n        <div className=\"chart-card\">\n          <h3>Device Distribution</h3>\n          <div className=\"chart-container\">\n            {deviceDistributionData && <Doughnut data={deviceDistributionData} options={{ responsive: true, maintainAspectRatio: false }} />}\n          </div>\n        </div>\n        \n        <div className=\"chart-card wide\">\n          <h3>Feeding History (Last Week)</h3>\n          <div className=\"chart-container\">\n            {feedingHistoryData && <Bar data={feedingHistoryData} options={{ responsive: true, maintainAspectRatio: false }} />}\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"system-status\">\n        <h2>System Status</h2>\n        \n        <div className=\"status-grid\">\n          <div className=\"status-card\">\n            <div className=\"status-header\">\n              <h3>Database</h3>\n              <span className=\"status-indicator healthy\">Healthy</span>\n            </div>\n            <div className=\"status-details\">\n              <div className=\"status-metric\">\n                <span>Query Performance:</span>\n                <span>27ms avg</span>\n              </div>\n              <div className=\"status-metric\">\n                <span>Storage Used:</span>\n                <span>12%</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"status-card\">\n            <div className=\"status-header\">\n              <h3>Authentication</h3>\n              <span className=\"status-indicator healthy\">Healthy</span>\n            </div>\n            <div className=\"status-details\">\n              <div className=\"status-metric\">\n                <span>Active Sessions:</span>\n                <span>{Math.round(userCount * 0.4)}</span>\n              </div>\n              <div className=\"status-metric\">\n                <span>Auth Success Rate:</span>\n                <span>99.7%</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"status-card\">\n            <div className=\"status-header\">\n              <h3>API</h3>\n              <span className=\"status-indicator healthy\">Healthy</span>\n            </div>\n            <div className=\"status-details\">\n              <div className=\"status-metric\">\n                <span>Response Time:</span>\n                <span>65ms avg</span>\n              </div>\n              <div className=\"status-metric\">\n                <span>Requests (24h):</span>\n                <span>{Math.round(userCount * 50)}</span>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"status-card\">\n            <div className=\"status-header\">\n              <h3>Storage</h3>\n              <span className=\"status-indicator healthy\">Healthy</span>\n            </div>\n            <div className=\"status-details\">\n              <div className=\"status-metric\">\n                <span>Total Files:</span>\n                <span>{userCount * 2}</span>\n              </div>\n              <div className=\"status-metric\">\n                <span>Storage Used:</span>\n                <span>126 MB</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminDashboard;\n"],"names":["ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","ArcElement","BarElement","Title","Tooltip","Legend","AdminDashboard","loading","setLoading","useState","error","setError","userCount","setUserCount","verifiedUserCount","setVerifiedUserCount","deviceCount","setDeviceCount","petCount","setPetCount","feedingCount","setFeedingCount","userGrowthData","setUserGrowthData","deviceStatusData","setDeviceStatusData","feedingHistoryData","setFeedingHistoryData","deviceDistributionData","setDeviceDistributionData","useEffect","fetchAdminData","async","data","user","supabase","auth","getUser","Error","profile","from","select","eq","id","single","role","count","usersCount","usersError","head","verifiedCount","verifiedError","not","devicesCount","devicesError","petsCount","petsError","feedingsCount","feedingsError","generateUserGrowthChart","generateDeviceStatusChart","generateFeedingHistoryChart","generateDeviceDistributionChart","err","console","message","labels","datasets","label","borderColor","backgroundColor","tension","borderWidth","Math","floor","_jsxs","className","children","_jsx","round","toFixed","Line","options","responsive","maintainAspectRatio","Doughnut","Bar"],"sourceRoot":""}
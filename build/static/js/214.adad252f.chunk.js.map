{"version":3,"file":"static/js/214.adad252f.chunk.js","mappings":"8KA4BA,MAukBA,EAvkBgCA,KAC9B,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,WAAkB,IACzCC,EAAQC,IAAaF,EAAAA,EAAAA,WAAkB,IACvCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,OAC3CK,EAASC,IAAcN,EAAAA,EAAAA,UAAwB,OAC/CO,EAAWC,IAAgBR,EAAAA,EAAAA,UAAiD,YAG5ES,EAAUC,IAAeV,EAAAA,EAAAA,UAAyB,CACvDW,kBAAkB,EAClBC,aAAa,EACbC,wBAAyB,EACzBC,wBAAyB,GACzBC,oBAAoB,EACpBC,mBAAoB,EACpBC,YAAa,CACXC,KAAM,GACNC,KAAM,IACNC,SAAU,GACVC,SAAU,GACVC,WAAY,GACZC,QAAQ,GAEVC,UAAW,CACTC,cAAe,UACfC,gBAAiB,UACjBC,SAAU,YACVC,YAAa,eACbC,uBAAuB,MAI3BC,EAAAA,EAAAA,YAAU,KACRC,GAAe,GACd,IAEH,MAAMA,EAAgBC,UACpB,IACEjC,GAAW,GAGX,MAAQkC,MAAM,KAAEC,UAAiBC,EAAAA,EAASC,KAAKC,UAC/C,IAAKH,EAAM,MAAM,IAAII,MAAM,0BAE3B,MAAQL,KAAMM,SAAqBJ,EAAAA,EAChCK,KAAK,YACLC,OAAO,QACPC,GAAG,KAAMR,EAAKS,IACdC,SAEH,IAAKL,GAAkC,UAApBA,EAAWM,KAC5B,MAAM,IAAIP,MAAM,gCAOlBQ,YAAW,KACT/C,GAAW,EAAM,GAChB,IACL,CAAE,MAAOgD,GACPC,QAAQ7C,MAAM,2BAA4B4C,GAC1C3C,EAAS2C,EAAIE,SAAW,2BACxBlD,GAAW,EACb,GAqBImD,EAAeA,CAACC,EAA+BC,EAAeC,KAEhE3C,EADc,gBAAZyC,GAAyC,cAAZA,EACnBG,IAAI,IACXA,EACH,CAACH,GAAU,IACNG,EAAKH,GACR,CAACC,GAAQC,KAIDC,IAAI,IACXA,EACH,CAACF,GAAQC,IAEb,EAmEF,OAAIvD,GAEAyD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oBAAmBC,SAAA,EAChCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,qBACfE,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAMPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,2BAA0BC,SAAA,EACvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,UACpCC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,qBAGLtD,IACCoD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,kBACbE,EAAAA,EAAAA,KAAA,KAAAD,SAAItD,KACJuD,EAAAA,EAAAA,KAAA,UACEF,UAAU,cACVG,QAASA,IAAMvD,EAAS,MAAMqD,SAC/B,YAMJpD,IACCkD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,KAAGF,UAAU,uBACbE,EAAAA,EAAAA,KAAA,KAAAD,SAAIpD,KACJqD,EAAAA,EAAAA,KAAA,UACEF,UAAU,gBACVG,QAASA,IAAMrD,EAAW,MAAMmD,SACjC,aAMLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,UACEF,UAAW,iBAA8B,YAAdjD,EAA0B,SAAW,IAChEoD,QAASA,IAAMnD,EAAa,WAAWiD,SACxC,aAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAW,iBAA8B,aAAdjD,EAA2B,SAAW,IACjEoD,QAASA,IAAMnD,EAAa,YAAYiD,SACzC,cAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAW,iBAA8B,SAAdjD,EAAuB,SAAW,IAC7DoD,QAASA,IAAMnD,EAAa,QAAQiD,SACrC,kBAGDC,EAAAA,EAAAA,KAAA,UACEF,UAAW,iBAA8B,OAAdjD,EAAqB,SAAW,IAC3DoD,QAASA,IAAMnD,EAAa,MAAMiD,SACnC,yBAKHF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,CACd,YAAdlD,IACCgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,sBAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,+FAKtChD,EAASE,kBACR+C,EAAAA,EAAAA,KAAA,UACEF,UAAU,8BACVG,QA7GQ3B,UAC1B,IACE9B,GAAU,GACVE,EAAS,MAGTM,GAAY4C,IAAI,IACXA,EACH3C,kBAAkB,MAIpBmC,YAAW,KACTxC,EAAW,wEACXJ,GAAU,EAAM,GACf,IACL,CAAE,MAAO6C,GACPC,QAAQ7C,MAAM,oCAAqC4C,GACnD3C,EAAS2C,EAAIE,SAAW,sCACxB/C,GAAU,EACZ,GA0FkB0D,SAAU3D,EAAOwD,SAClB,2BAIDC,EAAAA,EAAAA,KAAA,UACEF,UAAU,6BACVG,QA5IS3B,UAC3B,IACE9B,GAAU,GACVE,EAAS,MAGTM,GAAY4C,IAAI,IACXA,EACH3C,kBAAkB,MAIpBmC,YAAW,KACTxC,EAAW,yFACXJ,GAAU,EAAM,GACf,IACL,CAAE,MAAO6C,GACPC,QAAQ7C,MAAM,mCAAoC4C,GAClD3C,EAAS2C,EAAIE,SAAW,qCACxB/C,GAAU,EACZ,GAyHkB0D,SAAU3D,EAAOwD,SAClB,+BAMLF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,mBAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,0CAEvCC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,2BAA0BC,SAAC,oBAG5CF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,wBAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,oDAEvCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEG,KAAK,WACLC,QAASrD,EAASM,mBAClBgD,SAAWC,GAAMd,EAAa,GAAI,qBAAsBc,EAAEC,OAAOH,YAEnEJ,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kBAIpBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,qBAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,mDAEvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEG,KAAK,SACLR,MAAO5C,EAASK,wBAChBiD,SAAWC,GAAMd,EAAa,GAAI,0BAA2BgB,SAASF,EAAEC,OAAOZ,QAC/Ec,IAAI,KACJC,IAAI,UAENV,EAAAA,EAAAA,KAAA,QAAAD,SAAM,wBAOD,aAAdlD,IACCgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,uCAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,wCAEvCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEG,KAAK,WACLC,QAASrD,EAASG,YAClBmD,SAAWC,GAAMd,EAAa,GAAI,cAAec,EAAEC,OAAOH,YAE5DJ,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kBAIpBD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,6BAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,mDAEvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEG,KAAK,SACLR,MAAO5C,EAASI,wBAChBkD,SAAWC,GAAMd,EAAa,GAAI,0BAA2BgB,SAASF,EAAEC,OAAOZ,QAC/Ec,IAAI,IACJC,IAAI,QAENV,EAAAA,EAAAA,KAAA,QAAAD,SAAM,sBAIVF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,4BAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,yDAEvCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,SACEG,KAAK,SACLR,MAAO5C,EAASO,mBAChB+C,SAAWC,GAAMd,EAAa,GAAI,qBAAsBgB,SAASF,EAAEC,OAAOZ,QAC1Ec,IAAI,IACJC,IAAI,QAENV,EAAAA,EAAAA,KAAA,QAAAD,SAAM,yBAOD,SAAdlD,IACCgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,gCAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,YAAWZ,SAAC,eAC3BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,YACHkB,KAAK,OACLR,MAAO5C,EAASQ,YAAYC,KAC5B6C,SAAWC,GAAMd,EAAa,cAAe,OAAQc,EAAEC,OAAOZ,OAC9DiB,YAAY,4BAIhBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,YAAWZ,SAAC,eAC3BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,YACHkB,KAAK,SACLR,MAAO5C,EAASQ,YAAYE,KAC5B4C,SAAWC,GAAMd,EAAa,cAAe,OAAQgB,SAASF,EAAEC,OAAOZ,QACvEiB,YAAY,oBAKlBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,YAAWZ,SAAC,mBAC3BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,YACHkB,KAAK,OACLR,MAAO5C,EAASQ,YAAYG,SAC5B2C,SAAWC,GAAMd,EAAa,cAAe,WAAYc,EAAEC,OAAOZ,OAClEiB,YAAY,4BAIhBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,YAAWZ,SAAC,mBAC3BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,YACHkB,KAAK,WACLR,MAAO5C,EAASQ,YAAYI,SAC5B0C,SAAWC,GAAMd,EAAa,cAAe,WAAYc,EAAEC,OAAOZ,OAClEiB,YAAY,4DAKlBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,aAAYZ,SAAC,gBAC5BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,aACHkB,KAAK,QACLR,MAAO5C,EAASQ,YAAYK,WAC5ByC,SAAWC,GAAMd,EAAa,cAAe,aAAcc,EAAEC,OAAOZ,OACpEiB,YAAY,mCAIhBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,qCAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,0CAEvCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEG,KAAK,WACLC,QAASrD,EAASQ,YAAYM,OAC9BwC,SAAWC,GAAMd,EAAa,cAAe,SAAUc,EAAEC,OAAOH,YAElEJ,EAAAA,EAAAA,KAAA,QAAMF,UAAU,kBAIpBE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UAC3BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,kBACVG,QA5VS3B,UACzB,IACE9B,GAAU,GACVE,EAAS,MAIT0C,YAAW,KACTxC,EAAW,yDACXJ,GAAU,EAAM,GACf,KACL,CAAE,MAAO6C,GACPC,QAAQ7C,MAAM,iCAAkC4C,GAChD3C,EAAS2C,EAAIE,SAAW,kCACxB/C,GAAU,EACZ,GA8UgB0D,SAAU3D,IAAWQ,EAASQ,YAAYC,OAAST,EAASQ,YAAYG,SAASqC,SAClF,4BAQM,OAAdlD,IACCgD,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,sBAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,kBAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,WAAUC,SAAA,EACvBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,gBAAeZ,SAAC,mBAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,gBACHkB,KAAK,QACLR,MAAO5C,EAASe,UAAUC,cAC1BsC,SAAWC,GAAMd,EAAa,YAAa,gBAAiBc,EAAEC,OAAOZ,UAEvEK,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLR,MAAO5C,EAASe,UAAUC,cAC1BsC,SAAWC,GAAMd,EAAa,YAAa,gBAAiBc,EAAEC,OAAOZ,OACrEiB,YAAY,mBAKlBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,kBAAiBZ,SAAC,qBACjCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,kBACHkB,KAAK,QACLR,MAAO5C,EAASe,UAAUE,gBAC1BqC,SAAWC,GAAMd,EAAa,YAAa,kBAAmBc,EAAEC,OAAOZ,UAEzEK,EAAAA,EAAAA,KAAA,SACEG,KAAK,OACLR,MAAO5C,EAASe,UAAUE,gBAC1BqC,SAAWC,GAAMd,EAAa,YAAa,kBAAmBc,EAAEC,OAAOZ,OACvEiB,YAAY,sBAMpBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,SAAC,mBAC/BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,OACEF,UAAU,kBACVe,MAAO,CAAEC,gBAAiB/D,EAASe,UAAUC,eAAgBgC,SAC9D,aAGDC,EAAAA,EAAAA,KAAA,OACEF,UAAU,oBACVe,MAAO,CAAEC,gBAAiB/D,EAASe,UAAUE,iBAAkB+B,SAChE,wBAOPF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,oBAEJF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,WAAUZ,SAAC,cAC1BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,WACHkB,KAAK,OACLR,MAAO5C,EAASe,UAAUG,SAC1BoC,SAAWC,GAAMd,EAAa,YAAa,WAAYc,EAAEC,OAAOZ,OAChEiB,YAAY,kBAIhBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,aAAYC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,SAAOW,QAAQ,cAAaZ,SAAC,iBAC7BC,EAAAA,EAAAA,KAAA,SACEf,GAAG,cACHkB,KAAK,OACLR,MAAO5C,EAASe,UAAUI,YAC1BmC,SAAWC,GAAMd,EAAa,YAAa,cAAec,EAAEC,OAAOZ,OACnEiB,YAAY,qBAIhBf,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,SAAC,gCAC9BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,SAAC,0CAEvCF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,SAAQC,SAAA,EACvBC,EAAAA,EAAAA,KAAA,SACEG,KAAK,WACLC,QAASrD,EAASe,UAAUK,sBAC5BkC,SAAWC,GAAMd,EAAa,YAAa,wBAAyBc,EAAEC,OAAOH,YAE/EJ,EAAAA,EAAAA,KAAA,QAAMF,UAAU,wBAO1BE,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,KAAA,UACEF,UAAU,2BACVG,QAvfO3B,UACjB,IACE9B,GAAU,GACVE,EAAS,MAIT0C,YAAW,KACTxC,EAAW,+BACXJ,GAAU,EAAM,GACf,IACL,CAAE,MAAO6C,GACPC,QAAQ7C,MAAM,yBAA0B4C,GACxC3C,EAAS2C,EAAIE,SAAW,2BACxB/C,GAAU,EACZ,GAyeU0D,SAAU3D,EAAOwD,SAEhBxD,EAAS,YAAc,4BAK5B,C","sources":["pages/AdminSettings.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { supabase } from '../supabaseClient.ts';\nimport '../styles/AdminSettings.css';\n\ninterface SystemSettings {\n  maintenance_mode: boolean;\n  enforce_2fa: boolean;\n  minimum_password_length: number;\n  session_timeout_minutes: number;\n  allow_social_login: boolean;\n  max_login_attempts: number;\n  smtp_config: {\n    host: string;\n    port: number;\n    username: string;\n    password: string;\n    from_email: string;\n    secure: boolean;\n  };\n  ui_config: {\n    primary_color: string;\n    secondary_color: string;\n    logo_url: string;\n    favicon_url: string;\n    allow_theme_selection: boolean;\n  };\n}\n\nconst AdminSettings: React.FC = () => {\n  const [loading, setLoading] = useState<boolean>(true);\n  const [saving, setSaving] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [success, setSuccess] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'general' | 'security' | 'smtp' | 'ui'>('general');\n  \n  // Form state\n  const [settings, setSettings] = useState<SystemSettings>({\n    maintenance_mode: false,\n    enforce_2fa: false,\n    minimum_password_length: 8,\n    session_timeout_minutes: 60,\n    allow_social_login: true,\n    max_login_attempts: 5,\n    smtp_config: {\n      host: '',\n      port: 587,\n      username: '',\n      password: '',\n      from_email: '',\n      secure: true\n    },\n    ui_config: {\n      primary_color: '#FFD700',\n      secondary_color: '#FF6347',\n      logo_url: '/logo.svg',\n      favicon_url: '/favicon.ico',\n      allow_theme_selection: true\n    }\n  });\n\n  useEffect(() => {\n    fetchSettings();\n  }, []);\n\n  const fetchSettings = async () => {\n    try {\n      setLoading(true);\n      \n      // Verify admin access\n      const { data: { user } } = await supabase.auth.getUser();\n      if (!user) throw new Error('User not authenticated');\n      \n      const { data: adminCheck } = await supabase\n        .from('profiles')\n        .select('role')\n        .eq('id', user.id)\n        .single();\n        \n      if (!adminCheck || adminCheck.role !== 'admin') {\n        throw new Error('You do not have admin access');\n      }\n      \n      // In a real app, you would fetch settings from a database\n      // For now, we'll use the default settings\n      \n      // Simulate a fetch delay\n      setTimeout(() => {\n        setLoading(false);\n      }, 1000);\n    } catch (err: any) {\n      console.error('Error fetching settings:', err);\n      setError(err.message || 'Failed to load settings');\n      setLoading(false);\n    }\n  };\n\n  const handleSave = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      \n      // In a real app, you would save settings to a database\n      // For now, we'll just simulate a save\n      setTimeout(() => {\n        setSuccess('Settings saved successfully');\n        setSaving(false);\n      }, 1000);\n    } catch (err: any) {\n      console.error('Error saving settings:', err);\n      setError(err.message || 'Failed to save settings');\n      setSaving(false);\n    }\n  };\n\n  const handleChange = (section: keyof SystemSettings, field: string, value: any) => {\n    if (section === 'smtp_config' || section === 'ui_config') {\n      setSettings(prev => ({\n        ...prev,\n        [section]: {\n          ...prev[section],\n          [field]: value\n        }\n      }));\n    } else {\n      setSettings(prev => ({\n        ...prev,\n        [field]: value\n      }));\n    }\n  };\n\n  const testSMTPConnection = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      \n      // In a real app, you would test the SMTP connection\n      // For now, we'll just simulate a test\n      setTimeout(() => {\n        setSuccess('SMTP connection successful! Test email sent to admin.');\n        setSaving(false);\n      }, 1500);\n    } catch (err: any) {\n      console.error('Error testing SMTP connection:', err);\n      setError(err.message || 'Failed to test SMTP connection');\n      setSaving(false);\n    }\n  };\n\n  const enterMaintenanceMode = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      \n      // Toggle maintenance mode\n      setSettings(prev => ({\n        ...prev,\n        maintenance_mode: true\n      }));\n      \n      // In a real app, you would update the database\n      setTimeout(() => {\n        setSuccess('Maintenance mode enabled. All non-admin users will be redirected to maintenance page.');\n        setSaving(false);\n      }, 1000);\n    } catch (err: any) {\n      console.error('Error enabling maintenance mode:', err);\n      setError(err.message || 'Failed to enable maintenance mode');\n      setSaving(false);\n    }\n  };\n\n  const exitMaintenanceMode = async () => {\n    try {\n      setSaving(true);\n      setError(null);\n      \n      // Toggle maintenance mode\n      setSettings(prev => ({\n        ...prev,\n        maintenance_mode: false\n      }));\n      \n      // In a real app, you would update the database\n      setTimeout(() => {\n        setSuccess('Maintenance mode disabled. All users can now access the application.');\n        setSaving(false);\n      }, 1000);\n    } catch (err: any) {\n      console.error('Error disabling maintenance mode:', err);\n      setError(err.message || 'Failed to disable maintenance mode');\n      setSaving(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"loading-container\">\n        <div className=\"loading-spinner\"></div>\n        <p>Loading settings...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"admin-settings-container\">\n      <div className=\"admin-settings-header\">\n        <h1>Admin Settings</h1>\n      </div>\n      \n      {error && (\n        <div className=\"error-alert\">\n          <i className=\"icon-warning\"></i>\n          <p>{error}</p>\n          <button \n            className=\"error-close\" \n            onClick={() => setError(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      {success && (\n        <div className=\"success-alert\">\n          <i className=\"icon-check-circle\"></i>\n          <p>{success}</p>\n          <button \n            className=\"success-close\" \n            onClick={() => setSuccess(null)}\n          >\n            &times;\n          </button>\n        </div>\n      )}\n      \n      <div className=\"settings-content\">\n        <div className=\"settings-tabs\">\n          <button \n            className={`settings-tab ${activeTab === 'general' ? 'active' : ''}`}\n            onClick={() => setActiveTab('general')}\n          >\n            General\n          </button>\n          <button \n            className={`settings-tab ${activeTab === 'security' ? 'active' : ''}`}\n            onClick={() => setActiveTab('security')}\n          >\n            Security\n          </button>\n          <button \n            className={`settings-tab ${activeTab === 'smtp' ? 'active' : ''}`}\n            onClick={() => setActiveTab('smtp')}\n          >\n            Email (SMTP)\n          </button>\n          <button \n            className={`settings-tab ${activeTab === 'ui' ? 'active' : ''}`}\n            onClick={() => setActiveTab('ui')}\n          >\n            UI Customization\n          </button>\n        </div>\n        \n        <div className=\"settings-panel\">\n          {activeTab === 'general' && (\n            <div className=\"settings-section\">\n              <h2>General Settings</h2>\n              \n              <div className=\"settings-group\">\n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Maintenance Mode</div>\n                    <div className=\"setting-description\">\n                      Put the application in maintenance mode. Only admins will be able to access the system.\n                    </div>\n                  </div>\n                  \n                  {settings.maintenance_mode ? (\n                    <button \n                      className=\"btn btn-outline btn-warning\"\n                      onClick={exitMaintenanceMode}\n                      disabled={saving}\n                    >\n                      Exit Maintenance Mode\n                    </button>\n                  ) : (\n                    <button \n                      className=\"btn btn-outline btn-danger\"\n                      onClick={enterMaintenanceMode}\n                      disabled={saving}\n                    >\n                      Enter Maintenance Mode\n                    </button>\n                  )}\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">System Status</div>\n                    <div className=\"setting-description\">Current system operational status</div>\n                  </div>\n                  <div className=\"status-indicator healthy\">Operational</div>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Allow Social Login</div>\n                    <div className=\"setting-description\">Enable users to log in with social accounts</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={settings.allow_social_login}\n                      onChange={(e) => handleChange('', 'allow_social_login', e.target.checked)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Session Timeout</div>\n                    <div className=\"setting-description\">Time in minutes until user sessions expire</div>\n                  </div>\n                  <div className=\"number-input\">\n                    <input \n                      type=\"number\" \n                      value={settings.session_timeout_minutes}\n                      onChange={(e) => handleChange('', 'session_timeout_minutes', parseInt(e.target.value))}\n                      min=\"15\"\n                      max=\"1440\"\n                    />\n                    <span>minutes</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'security' && (\n            <div className=\"settings-section\">\n              <h2>Security Settings</h2>\n              \n              <div className=\"settings-group\">\n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Enforce Two-Factor Authentication</div>\n                    <div className=\"setting-description\">Require all users to set up 2FA</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={settings.enforce_2fa}\n                      onChange={(e) => handleChange('', 'enforce_2fa', e.target.checked)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Minimum Password Length</div>\n                    <div className=\"setting-description\">Minimum number of characters for passwords</div>\n                  </div>\n                  <div className=\"number-input\">\n                    <input \n                      type=\"number\" \n                      value={settings.minimum_password_length}\n                      onChange={(e) => handleChange('', 'minimum_password_length', parseInt(e.target.value))}\n                      min=\"6\"\n                      max=\"20\"\n                    />\n                    <span>characters</span>\n                  </div>\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Maximum Login Attempts</div>\n                    <div className=\"setting-description\">Number of failed logins before account is locked</div>\n                  </div>\n                  <div className=\"number-input\">\n                    <input \n                      type=\"number\" \n                      value={settings.max_login_attempts}\n                      onChange={(e) => handleChange('', 'max_login_attempts', parseInt(e.target.value))}\n                      min=\"3\"\n                      max=\"10\"\n                    />\n                    <span>attempts</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'smtp' && (\n            <div className=\"settings-section\">\n              <h2>Email Configuration (SMTP)</h2>\n              \n              <div className=\"settings-group\">\n                <div className=\"form-row\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"smtp-host\">SMTP Host</label>\n                    <input\n                      id=\"smtp-host\"\n                      type=\"text\"\n                      value={settings.smtp_config.host}\n                      onChange={(e) => handleChange('smtp_config', 'host', e.target.value)}\n                      placeholder=\"e.g. smtp.gmail.com\"\n                    />\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"smtp-port\">SMTP Port</label>\n                    <input\n                      id=\"smtp-port\"\n                      type=\"number\"\n                      value={settings.smtp_config.port}\n                      onChange={(e) => handleChange('smtp_config', 'port', parseInt(e.target.value))}\n                      placeholder=\"e.g. 587\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"form-row\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"smtp-user\">SMTP Username</label>\n                    <input\n                      id=\"smtp-user\"\n                      type=\"text\"\n                      value={settings.smtp_config.username}\n                      onChange={(e) => handleChange('smtp_config', 'username', e.target.value)}\n                      placeholder=\"e.g. your@email.com\"\n                    />\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"smtp-pass\">SMTP Password</label>\n                    <input\n                      id=\"smtp-pass\"\n                      type=\"password\"\n                      value={settings.smtp_config.password}\n                      onChange={(e) => handleChange('smtp_config', 'password', e.target.value)}\n                      placeholder=\"••••••••\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"from-email\">From Email</label>\n                  <input\n                    id=\"from-email\"\n                    type=\"email\"\n                    value={settings.smtp_config.from_email}\n                    onChange={(e) => handleChange('smtp_config', 'from_email', e.target.value)}\n                    placeholder=\"e.g. noreply@petfeeder.com\"\n                  />\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Use Secure Connection (TLS/SSL)</div>\n                    <div className=\"setting-description\">Enable secure connection for SMTP</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={settings.smtp_config.secure}\n                      onChange={(e) => handleChange('smtp_config', 'secure', e.target.checked)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n                \n                <div className=\"form-actions\">\n                  <button \n                    className=\"btn btn-outline\"\n                    onClick={testSMTPConnection}\n                    disabled={saving || !settings.smtp_config.host || !settings.smtp_config.username}\n                  >\n                    Test Connection\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'ui' && (\n            <div className=\"settings-section\">\n              <h2>UI Customization</h2>\n              \n              <div className=\"settings-group\">\n                <h3>Theme Colors</h3>\n                \n                <div className=\"form-row\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"primary-color\">Primary Color</label>\n                    <div className=\"color-input\">\n                      <input\n                        id=\"primary-color\"\n                        type=\"color\"\n                        value={settings.ui_config.primary_color}\n                        onChange={(e) => handleChange('ui_config', 'primary_color', e.target.value)}\n                      />\n                      <input\n                        type=\"text\"\n                        value={settings.ui_config.primary_color}\n                        onChange={(e) => handleChange('ui_config', 'primary_color', e.target.value)}\n                        placeholder=\"#FFD700\"\n                      />\n                    </div>\n                  </div>\n                  \n                  <div className=\"form-group\">\n                    <label htmlFor=\"secondary-color\">Secondary Color</label>\n                    <div className=\"color-input\">\n                      <input\n                        id=\"secondary-color\"\n                        type=\"color\"\n                        value={settings.ui_config.secondary_color}\n                        onChange={(e) => handleChange('ui_config', 'secondary_color', e.target.value)}\n                      />\n                      <input\n                        type=\"text\"\n                        value={settings.ui_config.secondary_color}\n                        onChange={(e) => handleChange('ui_config', 'secondary_color', e.target.value)}\n                        placeholder=\"#FF6347\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"color-preview\">\n                  <div className=\"preview-title\">Color Preview</div>\n                  <div className=\"preview-colors\">\n                    <div \n                      className=\"preview-primary\"\n                      style={{ backgroundColor: settings.ui_config.primary_color }}\n                    >\n                      Primary\n                    </div>\n                    <div \n                      className=\"preview-secondary\"\n                      style={{ backgroundColor: settings.ui_config.secondary_color }}\n                    >\n                      Secondary\n                    </div>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"settings-group\">\n                <h3>Logo & Favicon</h3>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"logo-url\">Logo URL</label>\n                  <input\n                    id=\"logo-url\"\n                    type=\"text\"\n                    value={settings.ui_config.logo_url}\n                    onChange={(e) => handleChange('ui_config', 'logo_url', e.target.value)}\n                    placeholder=\"/logo.svg\"\n                  />\n                </div>\n                \n                <div className=\"form-group\">\n                  <label htmlFor=\"favicon-url\">Favicon URL</label>\n                  <input\n                    id=\"favicon-url\"\n                    type=\"text\"\n                    value={settings.ui_config.favicon_url}\n                    onChange={(e) => handleChange('ui_config', 'favicon_url', e.target.value)}\n                    placeholder=\"/favicon.ico\"\n                  />\n                </div>\n                \n                <div className=\"setting-item\">\n                  <div className=\"setting-info\">\n                    <div className=\"setting-name\">Allow User Theme Selection</div>\n                    <div className=\"setting-description\">Let users select light/dark theme</div>\n                  </div>\n                  <label className=\"switch\">\n                    <input \n                      type=\"checkbox\"\n                      checked={settings.ui_config.allow_theme_selection}\n                      onChange={(e) => handleChange('ui_config', 'allow_theme_selection', e.target.checked)}\n                    />\n                    <span className=\"slider\"></span>\n                  </label>\n                </div>\n              </div>\n            </div>\n          )}\n          \n          <div className=\"settings-actions\">\n            <button \n              className=\"btn btn-primary btn-save\"\n              onClick={handleSave}\n              disabled={saving}\n            >\n              {saving ? 'Saving...' : 'Save Settings'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminSettings;\n"],"names":["AdminSettings","loading","setLoading","useState","saving","setSaving","error","setError","success","setSuccess","activeTab","setActiveTab","settings","setSettings","maintenance_mode","enforce_2fa","minimum_password_length","session_timeout_minutes","allow_social_login","max_login_attempts","smtp_config","host","port","username","password","from_email","secure","ui_config","primary_color","secondary_color","logo_url","favicon_url","allow_theme_selection","useEffect","fetchSettings","async","data","user","supabase","auth","getUser","Error","adminCheck","from","select","eq","id","single","role","setTimeout","err","console","message","handleChange","section","field","value","prev","_jsxs","className","children","_jsx","onClick","disabled","type","checked","onChange","e","target","parseInt","min","max","htmlFor","placeholder","style","backgroundColor"],"sourceRoot":""}
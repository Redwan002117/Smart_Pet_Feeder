{"ast":null,"code":"import { createClient } from '@supabase/supabase-js';\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against reliable time servers\nexport const checkSystemClock = async () => {\n  // Array of time API endpoints to try in order\n  const timeApis = [{\n    url: 'https://worldtimeapi.org/api/ip',\n    extractTime: data => data.unixtime\n  }, {\n    url: 'https://timeapi.io/api/Time/current/zone?timeZone=UTC',\n    extractTime: data => Math.floor(new Date(data.dateTime).getTime() / 1000)\n  }, {\n    url: 'https://showcase.api.linx.twenty57.net/UnixTime/tounix?date=now',\n    extractTime: data => parseInt(data)\n  }];\n\n  // Try each API in sequence until one succeeds\n  for (const api of timeApis) {\n    try {\n      console.log(`Attempting to fetch time from ${api.url}`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n\n      const response = await fetch(api.url, {\n        signal: controller.signal,\n        cache: 'no-cache'\n      });\n      clearTimeout(timeoutId);\n      if (!response.ok) {\n        console.warn(`Time API returned ${response.status}: ${response.statusText}`);\n        continue; // Try next API\n      }\n      const data = await response.json();\n      const serverTime = api.extractTime(data);\n      if (!serverTime) {\n        console.warn(\"Could not extract time from API response\");\n        continue; // Try next API\n      }\n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      console.log(`Time check successful. Server: ${serverTime}, Local: ${localTime}, Skew: ${skew}s`);\n      if (skew > 60) {\n        // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n      return {\n        hasSkew: false\n      };\n    } catch (error) {\n      console.warn(`Failed to check time with ${api.url}:`, error);\n      // Continue to next API\n    }\n  }\n\n  // If all APIs fail, handle gracefully\n  console.log(\"All time API checks failed. Assuming clock is correct.\");\n  return {\n    hasSkew: false,\n    error: new Error(\"Could not verify system time - all time APIs failed\")\n  };\n};","map":{"version":3,"names":["createClient","supabaseUrl","supabaseAnonKey","supabase","auth","autoRefreshToken","persistSession","detectSessionInUrl","flowType","clockSkewTolerance","onAuthStateChange","event","session","console","log","now","Math","floor","Date","expiresAt","expires_at","warn","checkSystemClock","timeApis","url","extractTime","data","unixtime","dateTime","getTime","parseInt","api","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","signal","cache","clearTimeout","ok","status","statusText","json","serverTime","localTime","skew","abs","hasSkew","skewSeconds","error","Error"],"sources":["/workspaces/Smart_Pet_Feeder/src/supabaseClient.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = 'https://enxtmrpvfkkwikgiybsx.supabase.co';\nconst supabaseAnonKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImVueHRtcnB2Zmtrd2lrZ2l5YnN4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQwNTM3MTksImV4cCI6MjA1OTYyOTcxOX0.MjOsYzLeZcudPH6I8jN3pBiLItjw4rBzcD54sIrtmXk';\n\n// Create the Supabase client with custom options for handling clock skew\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    // Add tolerance for time skew between client and server (3600 seconds = 1 hour)\n    flowType: 'implicit',\n    clockSkewTolerance: 3600\n  }\n});\n\ninterface ClockCheckResult {\n  hasSkew: boolean;\n  skewSeconds?: number;\n  serverTime?: number;\n  localTime?: number;\n  error?: Error;\n}\n\n// Add a listener for auth state changes to handle and log any issues\nsupabase.auth.onAuthStateChange((event, session) => {\n  if (event === 'TOKEN_REFRESHED') {\n    console.log('Token was refreshed successfully');\n  } else if (event === 'SIGNED_IN' && session) {\n    // Log successful sign in but check for time issues\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at;\n    \n    if (expiresAt && now > expiresAt) {\n      console.warn('Session expiration time is in the past. Check system clock.');\n    }\n    if (expiresAt && expiresAt - now > 3600 * 24) {\n      console.warn('Session expiration time is far in the future. Potential clock skew.');\n    }\n  }\n});\n\n// Add a utility function to check system time against reliable time servers\nexport const checkSystemClock = async (): Promise<ClockCheckResult> => {\n  // Array of time API endpoints to try in order\n  const timeApis = [\n    {\n      url: 'https://worldtimeapi.org/api/ip',\n      extractTime: (data: any) => data.unixtime\n    },\n    {\n      url: 'https://timeapi.io/api/Time/current/zone?timeZone=UTC',\n      extractTime: (data: any) => Math.floor(new Date(data.dateTime).getTime() / 1000)\n    },\n    {\n      url: 'https://showcase.api.linx.twenty57.net/UnixTime/tounix?date=now',\n      extractTime: (data: any) => parseInt(data)\n    }\n  ];\n\n  // Try each API in sequence until one succeeds\n  for (const api of timeApis) {\n    try {\n      console.log(`Attempting to fetch time from ${api.url}`);\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 3000); // 3 second timeout\n      \n      const response = await fetch(api.url, { \n        signal: controller.signal,\n        cache: 'no-cache' \n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        console.warn(`Time API returned ${response.status}: ${response.statusText}`);\n        continue; // Try next API\n      }\n      \n      const data = await response.json();\n      const serverTime = api.extractTime(data);\n      \n      if (!serverTime) {\n        console.warn(\"Could not extract time from API response\");\n        continue; // Try next API\n      }\n      \n      const localTime = Math.floor(Date.now() / 1000);\n      const skew = Math.abs(serverTime - localTime);\n      \n      console.log(`Time check successful. Server: ${serverTime}, Local: ${localTime}, Skew: ${skew}s`);\n      \n      if (skew > 60) { // More than 1 minute difference\n        console.warn(`System clock is off by ${skew} seconds. This may cause authentication issues.`);\n        return {\n          hasSkew: true,\n          skewSeconds: skew,\n          serverTime,\n          localTime\n        };\n      }\n      \n      return { hasSkew: false };\n    } catch (error) {\n      console.warn(`Failed to check time with ${api.url}:`, error);\n      // Continue to next API\n    }\n  }\n  \n  // If all APIs fail, handle gracefully\n  console.log(\"All time API checks failed. Assuming clock is correct.\");\n  return { \n    hasSkew: false, \n    error: new Error(\"Could not verify system time - all time APIs failed\") \n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
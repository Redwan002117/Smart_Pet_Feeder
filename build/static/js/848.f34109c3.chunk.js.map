{"version":3,"file":"static/js/848.f34109c3.chunk.js","mappings":"uLAIA,MAgHA,EAhH+BA,KAC7B,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAwB,MAC5CC,GAAWC,EAAAA,EAAAA,MAqFjB,OAnFAC,EAAAA,EAAAA,YAAU,KAEmBC,WACzB,IAEE,MAAMC,EAAa,IAAIC,gBAAgBC,OAAOC,SAASC,KAAKC,UAAU,IAChEC,EAAc,IAAIL,gBAAgBC,OAAOC,SAASI,QAGxD,GAAIP,EAAWQ,IAAI,gBAAiB,CAAC,IAADC,EAElC,MAAM,KAAEC,EAAI,MAAEjB,SAAgBkB,EAAAA,EAASC,KAAKC,aAE5C,GAAIpB,EAAO,MAAMA,EAEjB,GAAQ,OAAJiB,QAAI,IAAJA,GAAa,QAATD,EAAJC,EAAMI,eAAO,IAAAL,GAAbA,EAAeM,KAAM,CAEvB,MAAQL,KAAMM,EAASvB,MAAOwB,SAAuBN,EAAAA,EAClDO,KAAK,YACLC,OAAO,KACPC,GAAG,KAAMV,EAAKI,QAAQC,KAAKM,IAC3BC,SAEH,GAAIL,GAAgBA,EAAaM,QAAQC,SAAS,iBAAkB,CAElE,MAAQ/B,MAAOgC,SAAsBd,EAAAA,EAClCO,KAAK,YACLQ,OAAO,CACN,CACEL,GAAIX,EAAKI,QAAQC,KAAKM,GACtBM,SAAUjB,EAAKI,QAAQC,KAAKa,cAAcD,UAAY,OAAOE,KAAKC,MAAMC,WAAWC,OAAO,KAC1FC,MAAOvB,EAAKI,QAAQC,KAAKkB,MACzBC,KAAM,UAIRT,GAAaU,QAAQ1C,MAAM,0BAA2BgC,EAC5D,CAGA7B,EAAS,aACX,CACF,MAEK,GAAgC,aAA5BU,EAAYE,IAAI,SAAsD,WAA5BF,EAAYE,IAAI,QAAsB,CAEvF,MAAM4B,EAAQ9B,EAAYE,IAAI,SAE9B,IAAK4B,EAAO,MAAM,IAAIC,MAAM,yBAG5B,GAAgC,aAA5B/B,EAAYE,IAAI,QAClBZ,EAAS,kBAAmB,CAAE0C,MAAO,CAAEF,gBAGpC,GAAgC,WAA5B9B,EAAYE,IAAI,QAAsB,CAE7C,MAAM,MAAEf,SAAgBkB,EAAAA,EAASC,KAAK2B,UAAU,CAC9CC,WAAYJ,EACZK,KAAM,WAGR,GAAIhD,EAAO,MAAMA,EAGjBG,EAAS,SAAU,CACjB0C,MAAO,CAAEf,QAAS,yCAEtB,CACF,KAAO,CAEL,MAAM,KAAEb,SAAeC,EAAAA,EAASC,KAAKC,aACrCjB,EAASc,EAAKI,QAAU,aAAe,SACzC,CACF,CAAE,MAAO4B,GACPP,QAAQ1C,MAAM,uBAAwBiD,GACtChD,EAASgD,EAAInB,SAAW,0CAC1B,GAGFoB,EAAoB,GACnB,CAAC/C,IAEAH,GAEAmD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACtCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,KAAGC,UAAU,gBACbD,EAAAA,EAAAA,KAAA,MAAAE,SAAI,0BACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAIrD,KACJmD,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kBAAkBG,QAASA,IAAMpD,EAAS,UAAUkD,SAAC,wBAS7EF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBC,UACtCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,wBAAuBC,SAAA,EACpCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBACfD,EAAAA,EAAAA,KAAA,KAAAE,SAAG,qCAED,C","sources":["pages/AuthCallback.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { supabase } from '../supabaseClient.ts';\n\nconst AuthCallback: React.FC = () => {\n  const [error, setError] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Handle the OAuth or magic link callback\n    const handleAuthCallback = async () => {\n      try {\n        // Get the auth code and session from URL\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const queryParams = new URLSearchParams(window.location.search);\n\n        // For OAuth flows, handle the session\n        if (hashParams.get('access_token')) {\n          // Supabase will automatically handle this through getSession()\n          const { data, error } = await supabase.auth.getSession();\n          \n          if (error) throw error;\n          \n          if (data?.session?.user) {\n            // Check if profile exists, if not create one\n            const { data: profile, error: profileError } = await supabase\n              .from('profiles')\n              .select('*')\n              .eq('id', data.session.user.id)\n              .single();\n            \n            if (profileError && profileError.message.includes('No rows found')) {\n              // Create a profile for the user\n              const { error: insertError } = await supabase\n                .from('profiles')\n                .insert([\n                  {\n                    id: data.session.user.id,\n                    username: data.session.user.user_metadata.username || `user${Date.now().toString().slice(-6)}`,\n                    email: data.session.user.email,\n                    role: 'user',\n                  }\n                ]);\n                \n              if (insertError) console.error('Error creating profile:', insertError);\n            }\n            \n            // Redirect to dashboard\n            navigate('/dashboard');\n          }\n        }\n        // For email link (OTP) flow\n        else if (queryParams.get('type') === 'recovery' || queryParams.get('type') === 'signup') {\n          // Get token from query params\n          const token = queryParams.get('token');\n          \n          if (!token) throw new Error('No token found in URL');\n          \n          // Handle password recovery flow\n          if (queryParams.get('type') === 'recovery') {\n            navigate('/reset-password', { state: { token } });\n          } \n          // Handle signup confirmation\n          else if (queryParams.get('type') === 'signup') {\n            // Confirm the signup if needed\n            const { error } = await supabase.auth.verifyOtp({\n              token_hash: token,\n              type: 'signup',\n            });\n            \n            if (error) throw error;\n            \n            // Redirect to login after successful confirmation\n            navigate('/login', { \n              state: { message: 'Email confirmed! You can now log in.' } \n            });\n          }\n        } else {\n          // Fallback - go to dashboard if logged in, otherwise to login\n          const { data } = await supabase.auth.getSession();\n          navigate(data.session ? '/dashboard' : '/login');\n        }\n      } catch (err: any) {\n        console.error('Auth callback error:', err);\n        setError(err.message || 'An error occurred during authentication');\n      }\n    };\n\n    handleAuthCallback();\n  }, [navigate]);\n\n  if (error) {\n    return (\n      <div className=\"auth-callback-container\">\n        <div className=\"auth-callback-error\">\n          <i className=\"icon-error\"></i>\n          <h2>Authentication Error</h2>\n          <p>{error}</p>\n          <button className=\"btn btn-primary\" onClick={() => navigate('/login')}>\n            Back to Login\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"auth-callback-container\">\n      <div className=\"auth-callback-loading\">\n        <div className=\"loading-spinner\"></div>\n        <p>Completing authentication...</p>\n      </div>\n    </div>\n  );\n};\n\nexport default AuthCallback;\n"],"names":["AuthCallback","error","setError","useState","navigate","useNavigate","useEffect","async","hashParams","URLSearchParams","window","location","hash","substring","queryParams","search","get","_data$session","data","supabase","auth","getSession","session","user","profile","profileError","from","select","eq","id","single","message","includes","insertError","insert","username","user_metadata","Date","now","toString","slice","email","role","console","token","Error","state","verifyOtp","token_hash","type","err","handleAuthCallback","_jsx","className","children","_jsxs","onClick"],"sourceRoot":""}